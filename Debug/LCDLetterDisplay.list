
LCDLetterDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003650  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800378c  0800378c  0000478c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038cc  080038cc  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080038cc  080038cc  000048cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038d4  080038d4  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038d4  080038d4  000048d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038d8  080038d8  000048d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080038dc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e68  2000005c  08003938  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ec4  08003938  00005ec4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b793  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da0  00000000  00000000  00010818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  000125b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000897  00000000  00000000  000130e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dbf  00000000  00000000  0001397f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cdca  00000000  00000000  0002a73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d22a  00000000  00000000  00037508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4732  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003364  00000000  00000000  000c4778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000c7adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000005c 	.word	0x2000005c
 8000158:	00000000 	.word	0x00000000
 800015c:	08003774 	.word	0x08003774

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000060 	.word	0x20000060
 8000178:	08003774 	.word	0x08003774

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b98c 	b.w	80004ac <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	468e      	mov	lr, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14a      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4617      	mov	r7, r2
 80001c0:	d962      	bls.n	8000288 <__udivmoddi4+0xdc>
 80001c2:	fab2 f682 	clz	r6, r2
 80001c6:	b14e      	cbz	r6, 80001dc <__udivmoddi4+0x30>
 80001c8:	f1c6 0320 	rsb	r3, r6, #32
 80001cc:	fa01 f806 	lsl.w	r8, r1, r6
 80001d0:	fa20 f303 	lsr.w	r3, r0, r3
 80001d4:	40b7      	lsls	r7, r6
 80001d6:	ea43 0808 	orr.w	r8, r3, r8
 80001da:	40b4      	lsls	r4, r6
 80001dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80001e4:	fa1f fc87 	uxth.w	ip, r7
 80001e8:	fb0e 8811 	mls	r8, lr, r1, r8
 80001ec:	fb01 f20c 	mul.w	r2, r1, ip
 80001f0:	0c23      	lsrs	r3, r4, #16
 80001f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d909      	bls.n	800020e <__udivmoddi4+0x62>
 80001fa:	18fb      	adds	r3, r7, r3
 80001fc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000200:	f080 80eb 	bcs.w	80003da <__udivmoddi4+0x22e>
 8000204:	429a      	cmp	r2, r3
 8000206:	f240 80e8 	bls.w	80003da <__udivmoddi4+0x22e>
 800020a:	3902      	subs	r1, #2
 800020c:	443b      	add	r3, r7
 800020e:	1a9a      	subs	r2, r3, r2
 8000210:	fbb2 f0fe 	udiv	r0, r2, lr
 8000214:	fb0e 2210 	mls	r2, lr, r0, r2
 8000218:	fb00 fc0c 	mul.w	ip, r0, ip
 800021c:	b2a3      	uxth	r3, r4
 800021e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000222:	459c      	cmp	ip, r3
 8000224:	d909      	bls.n	800023a <__udivmoddi4+0x8e>
 8000226:	18fb      	adds	r3, r7, r3
 8000228:	f100 32ff 	add.w	r2, r0, #4294967295
 800022c:	f080 80d7 	bcs.w	80003de <__udivmoddi4+0x232>
 8000230:	459c      	cmp	ip, r3
 8000232:	f240 80d4 	bls.w	80003de <__udivmoddi4+0x232>
 8000236:	443b      	add	r3, r7
 8000238:	3802      	subs	r0, #2
 800023a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800023e:	2100      	movs	r1, #0
 8000240:	eba3 030c 	sub.w	r3, r3, ip
 8000244:	b11d      	cbz	r5, 800024e <__udivmoddi4+0xa2>
 8000246:	2200      	movs	r2, #0
 8000248:	40f3      	lsrs	r3, r6
 800024a:	e9c5 3200 	strd	r3, r2, [r5]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d905      	bls.n	8000262 <__udivmoddi4+0xb6>
 8000256:	b10d      	cbz	r5, 800025c <__udivmoddi4+0xb0>
 8000258:	e9c5 0100 	strd	r0, r1, [r5]
 800025c:	2100      	movs	r1, #0
 800025e:	4608      	mov	r0, r1
 8000260:	e7f5      	b.n	800024e <__udivmoddi4+0xa2>
 8000262:	fab3 f183 	clz	r1, r3
 8000266:	2900      	cmp	r1, #0
 8000268:	d146      	bne.n	80002f8 <__udivmoddi4+0x14c>
 800026a:	4573      	cmp	r3, lr
 800026c:	d302      	bcc.n	8000274 <__udivmoddi4+0xc8>
 800026e:	4282      	cmp	r2, r0
 8000270:	f200 8108 	bhi.w	8000484 <__udivmoddi4+0x2d8>
 8000274:	1a84      	subs	r4, r0, r2
 8000276:	eb6e 0203 	sbc.w	r2, lr, r3
 800027a:	2001      	movs	r0, #1
 800027c:	4690      	mov	r8, r2
 800027e:	2d00      	cmp	r5, #0
 8000280:	d0e5      	beq.n	800024e <__udivmoddi4+0xa2>
 8000282:	e9c5 4800 	strd	r4, r8, [r5]
 8000286:	e7e2      	b.n	800024e <__udivmoddi4+0xa2>
 8000288:	2a00      	cmp	r2, #0
 800028a:	f000 8091 	beq.w	80003b0 <__udivmoddi4+0x204>
 800028e:	fab2 f682 	clz	r6, r2
 8000292:	2e00      	cmp	r6, #0
 8000294:	f040 80a5 	bne.w	80003e2 <__udivmoddi4+0x236>
 8000298:	1a8a      	subs	r2, r1, r2
 800029a:	2101      	movs	r1, #1
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a2:	b280      	uxth	r0, r0
 80002a4:	b2bc      	uxth	r4, r7
 80002a6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002aa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb04 f20c 	mul.w	r2, r4, ip
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d907      	bls.n	80002ca <__udivmoddi4+0x11e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80002c0:	d202      	bcs.n	80002c8 <__udivmoddi4+0x11c>
 80002c2:	429a      	cmp	r2, r3
 80002c4:	f200 80e3 	bhi.w	800048e <__udivmoddi4+0x2e2>
 80002c8:	46c4      	mov	ip, r8
 80002ca:	1a9b      	subs	r3, r3, r2
 80002cc:	fbb3 f2fe 	udiv	r2, r3, lr
 80002d0:	fb0e 3312 	mls	r3, lr, r2, r3
 80002d4:	fb02 f404 	mul.w	r4, r2, r4
 80002d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002dc:	429c      	cmp	r4, r3
 80002de:	d907      	bls.n	80002f0 <__udivmoddi4+0x144>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f102 30ff 	add.w	r0, r2, #4294967295
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0x142>
 80002e8:	429c      	cmp	r4, r3
 80002ea:	f200 80cd 	bhi.w	8000488 <__udivmoddi4+0x2dc>
 80002ee:	4602      	mov	r2, r0
 80002f0:	1b1b      	subs	r3, r3, r4
 80002f2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80002f6:	e7a5      	b.n	8000244 <__udivmoddi4+0x98>
 80002f8:	f1c1 0620 	rsb	r6, r1, #32
 80002fc:	408b      	lsls	r3, r1
 80002fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000302:	431f      	orrs	r7, r3
 8000304:	fa2e fa06 	lsr.w	sl, lr, r6
 8000308:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800030c:	fbba f8f9 	udiv	r8, sl, r9
 8000310:	fa0e fe01 	lsl.w	lr, lr, r1
 8000314:	fa20 f306 	lsr.w	r3, r0, r6
 8000318:	fb09 aa18 	mls	sl, r9, r8, sl
 800031c:	fa1f fc87 	uxth.w	ip, r7
 8000320:	ea43 030e 	orr.w	r3, r3, lr
 8000324:	fa00 fe01 	lsl.w	lr, r0, r1
 8000328:	fb08 f00c 	mul.w	r0, r8, ip
 800032c:	0c1c      	lsrs	r4, r3, #16
 800032e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000332:	42a0      	cmp	r0, r4
 8000334:	fa02 f201 	lsl.w	r2, r2, r1
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x1a4>
 800033a:	193c      	adds	r4, r7, r4
 800033c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000340:	f080 809e 	bcs.w	8000480 <__udivmoddi4+0x2d4>
 8000344:	42a0      	cmp	r0, r4
 8000346:	f240 809b 	bls.w	8000480 <__udivmoddi4+0x2d4>
 800034a:	f1a8 0802 	sub.w	r8, r8, #2
 800034e:	443c      	add	r4, r7
 8000350:	1a24      	subs	r4, r4, r0
 8000352:	b298      	uxth	r0, r3
 8000354:	fbb4 f3f9 	udiv	r3, r4, r9
 8000358:	fb09 4413 	mls	r4, r9, r3, r4
 800035c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000360:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x1d0>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f103 30ff 	add.w	r0, r3, #4294967295
 800036e:	f080 8085 	bcs.w	800047c <__udivmoddi4+0x2d0>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8082 	bls.w	800047c <__udivmoddi4+0x2d0>
 8000378:	3b02      	subs	r3, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	fba0 8c02 	umull	r8, ip, r0, r2
 8000388:	4564      	cmp	r4, ip
 800038a:	4643      	mov	r3, r8
 800038c:	46e1      	mov	r9, ip
 800038e:	d364      	bcc.n	800045a <__udivmoddi4+0x2ae>
 8000390:	d061      	beq.n	8000456 <__udivmoddi4+0x2aa>
 8000392:	b15d      	cbz	r5, 80003ac <__udivmoddi4+0x200>
 8000394:	ebbe 0203 	subs.w	r2, lr, r3
 8000398:	eb64 0409 	sbc.w	r4, r4, r9
 800039c:	fa04 f606 	lsl.w	r6, r4, r6
 80003a0:	fa22 f301 	lsr.w	r3, r2, r1
 80003a4:	431e      	orrs	r6, r3
 80003a6:	40cc      	lsrs	r4, r1
 80003a8:	e9c5 6400 	strd	r6, r4, [r5]
 80003ac:	2100      	movs	r1, #0
 80003ae:	e74e      	b.n	800024e <__udivmoddi4+0xa2>
 80003b0:	fbb1 fcf2 	udiv	ip, r1, r2
 80003b4:	0c01      	lsrs	r1, r0, #16
 80003b6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003ba:	b280      	uxth	r0, r0
 80003bc:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003c0:	463b      	mov	r3, r7
 80003c2:	fbb1 f1f7 	udiv	r1, r1, r7
 80003c6:	4638      	mov	r0, r7
 80003c8:	463c      	mov	r4, r7
 80003ca:	46b8      	mov	r8, r7
 80003cc:	46be      	mov	lr, r7
 80003ce:	2620      	movs	r6, #32
 80003d0:	eba2 0208 	sub.w	r2, r2, r8
 80003d4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003d8:	e765      	b.n	80002a6 <__udivmoddi4+0xfa>
 80003da:	4601      	mov	r1, r0
 80003dc:	e717      	b.n	800020e <__udivmoddi4+0x62>
 80003de:	4610      	mov	r0, r2
 80003e0:	e72b      	b.n	800023a <__udivmoddi4+0x8e>
 80003e2:	f1c6 0120 	rsb	r1, r6, #32
 80003e6:	fa2e fc01 	lsr.w	ip, lr, r1
 80003ea:	40b7      	lsls	r7, r6
 80003ec:	fa0e fe06 	lsl.w	lr, lr, r6
 80003f0:	fa20 f101 	lsr.w	r1, r0, r1
 80003f4:	ea41 010e 	orr.w	r1, r1, lr
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	fbbc f8fe 	udiv	r8, ip, lr
 8000400:	b2bc      	uxth	r4, r7
 8000402:	fb0e cc18 	mls	ip, lr, r8, ip
 8000406:	fb08 f904 	mul.w	r9, r8, r4
 800040a:	0c0a      	lsrs	r2, r1, #16
 800040c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000410:	40b0      	lsls	r0, r6
 8000412:	4591      	cmp	r9, r2
 8000414:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000418:	b280      	uxth	r0, r0
 800041a:	d93e      	bls.n	800049a <__udivmoddi4+0x2ee>
 800041c:	18ba      	adds	r2, r7, r2
 800041e:	f108 3cff 	add.w	ip, r8, #4294967295
 8000422:	d201      	bcs.n	8000428 <__udivmoddi4+0x27c>
 8000424:	4591      	cmp	r9, r2
 8000426:	d81f      	bhi.n	8000468 <__udivmoddi4+0x2bc>
 8000428:	eba2 0209 	sub.w	r2, r2, r9
 800042c:	fbb2 f9fe 	udiv	r9, r2, lr
 8000430:	fb09 f804 	mul.w	r8, r9, r4
 8000434:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000438:	b28a      	uxth	r2, r1
 800043a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800043e:	4542      	cmp	r2, r8
 8000440:	d229      	bcs.n	8000496 <__udivmoddi4+0x2ea>
 8000442:	18ba      	adds	r2, r7, r2
 8000444:	f109 31ff 	add.w	r1, r9, #4294967295
 8000448:	d2c2      	bcs.n	80003d0 <__udivmoddi4+0x224>
 800044a:	4542      	cmp	r2, r8
 800044c:	d2c0      	bcs.n	80003d0 <__udivmoddi4+0x224>
 800044e:	f1a9 0102 	sub.w	r1, r9, #2
 8000452:	443a      	add	r2, r7
 8000454:	e7bc      	b.n	80003d0 <__udivmoddi4+0x224>
 8000456:	45c6      	cmp	lr, r8
 8000458:	d29b      	bcs.n	8000392 <__udivmoddi4+0x1e6>
 800045a:	ebb8 0302 	subs.w	r3, r8, r2
 800045e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000462:	3801      	subs	r0, #1
 8000464:	46e1      	mov	r9, ip
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e6>
 8000468:	eba7 0909 	sub.w	r9, r7, r9
 800046c:	444a      	add	r2, r9
 800046e:	fbb2 f9fe 	udiv	r9, r2, lr
 8000472:	f1a8 0c02 	sub.w	ip, r8, #2
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	e7db      	b.n	8000434 <__udivmoddi4+0x288>
 800047c:	4603      	mov	r3, r0
 800047e:	e77d      	b.n	800037c <__udivmoddi4+0x1d0>
 8000480:	46d0      	mov	r8, sl
 8000482:	e765      	b.n	8000350 <__udivmoddi4+0x1a4>
 8000484:	4608      	mov	r0, r1
 8000486:	e6fa      	b.n	800027e <__udivmoddi4+0xd2>
 8000488:	443b      	add	r3, r7
 800048a:	3a02      	subs	r2, #2
 800048c:	e730      	b.n	80002f0 <__udivmoddi4+0x144>
 800048e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000492:	443b      	add	r3, r7
 8000494:	e719      	b.n	80002ca <__udivmoddi4+0x11e>
 8000496:	4649      	mov	r1, r9
 8000498:	e79a      	b.n	80003d0 <__udivmoddi4+0x224>
 800049a:	eba2 0209 	sub.w	r2, r2, r9
 800049e:	fbb2 f9fe 	udiv	r9, r2, lr
 80004a2:	46c4      	mov	ip, r8
 80004a4:	fb09 f804 	mul.w	r8, r9, r4
 80004a8:	e7c4      	b.n	8000434 <__udivmoddi4+0x288>
 80004aa:	bf00      	nop

080004ac <__aeabi_idiv0>:
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <delay>:
#include "LCDControl.h"
#include <string.h>
#include <stdbool.h>

void delay (uint16_t us)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80004ba:	4b08      	ldr	r3, [pc, #32]	@ (80004dc <delay+0x2c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2200      	movs	r2, #0
 80004c0:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 80004c2:	bf00      	nop
 80004c4:	4b05      	ldr	r3, [pc, #20]	@ (80004dc <delay+0x2c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80004ca:	88fb      	ldrh	r3, [r7, #6]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d3f9      	bcc.n	80004c4 <delay+0x14>
}
 80004d0:	bf00      	nop
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	20000078 	.word	0x20000078

080004e0 <send_to_lcd>:
void send_to_lcd (char data, int rs)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	6039      	str	r1, [r7, #0]
 80004ea:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	461a      	mov	r2, r3
 80004f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004f6:	4821      	ldr	r0, [pc, #132]	@ (800057c <send_to_lcd+0x9c>)
 80004f8:	f001 fa57 	bl	80019aa <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	08db      	lsrs	r3, r3, #3
 8000500:	b2db      	uxtb	r3, r3
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	b2db      	uxtb	r3, r3
 8000508:	461a      	mov	r2, r3
 800050a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800050e:	481c      	ldr	r0, [pc, #112]	@ (8000580 <send_to_lcd+0xa0>)
 8000510:	f001 fa4b 	bl	80019aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	089b      	lsrs	r3, r3, #2
 8000518:	b2db      	uxtb	r3, r3
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	b2db      	uxtb	r3, r3
 8000520:	461a      	mov	r2, r3
 8000522:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000526:	4816      	ldr	r0, [pc, #88]	@ (8000580 <send_to_lcd+0xa0>)
 8000528:	f001 fa3f 	bl	80019aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	085b      	lsrs	r3, r3, #1
 8000530:	b2db      	uxtb	r3, r3
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	b2db      	uxtb	r3, r3
 8000538:	461a      	mov	r2, r3
 800053a:	2102      	movs	r1, #2
 800053c:	4810      	ldr	r0, [pc, #64]	@ (8000580 <send_to_lcd+0xa0>)
 800053e:	f001 fa34 	bl	80019aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	f003 0301 	and.w	r3, r3, #1
 8000548:	b2db      	uxtb	r3, r3
 800054a:	461a      	mov	r2, r3
 800054c:	2104      	movs	r1, #4
 800054e:	480c      	ldr	r0, [pc, #48]	@ (8000580 <send_to_lcd+0xa0>)
 8000550:	f001 fa2b 	bl	80019aa <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000554:	2201      	movs	r2, #1
 8000556:	2120      	movs	r1, #32
 8000558:	4808      	ldr	r0, [pc, #32]	@ (800057c <send_to_lcd+0x9c>)
 800055a:	f001 fa26 	bl	80019aa <HAL_GPIO_WritePin>
	delay (20);
 800055e:	2014      	movs	r0, #20
 8000560:	f7ff ffa6 	bl	80004b0 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000564:	2200      	movs	r2, #0
 8000566:	2120      	movs	r1, #32
 8000568:	4804      	ldr	r0, [pc, #16]	@ (800057c <send_to_lcd+0x9c>)
 800056a:	f001 fa1e 	bl	80019aa <HAL_GPIO_WritePin>
	delay (20);
 800056e:	2014      	movs	r0, #20
 8000570:	f7ff ff9e 	bl	80004b0 <delay>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40020800 	.word	0x40020800
 8000580:	40020400 	.word	0x40020400

08000584 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	091b      	lsrs	r3, r3, #4
 8000592:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend, 0); // RS must be 0 while sending command
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff ffa1 	bl	80004e0 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f003 030f 	and.w	r3, r3, #15
 80005a4:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ff98 	bl	80004e0 <send_to_lcd>
}
 80005b0:	bf00      	nop
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	091b      	lsrs	r3, r3, #4
 80005c6:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	2101      	movs	r1, #1
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff ff87 	bl	80004e0 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	f003 030f 	and.w	r3, r3, #15
 80005d8:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	2101      	movs	r1, #1
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff ff7e 	bl	80004e0 <send_to_lcd>
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <lcd_clear>:

void lcd_clear (void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 80005f0:	2001      	movs	r0, #1
 80005f2:	f7ff ffc7 	bl	8000584 <lcd_send_cmd>
	HAL_Delay(2);
 80005f6:	2002      	movs	r0, #2
 80005f8:	f000 ff00 	bl	80013fc <HAL_Delay>
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}

08000600 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
    uint8_t base_addr;

    // Handle row-specific DDRAM base addresses
    switch (row) {
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b03      	cmp	r3, #3
 800060e:	d817      	bhi.n	8000640 <lcd_put_cur+0x40>
 8000610:	a201      	add	r2, pc, #4	@ (adr r2, 8000618 <lcd_put_cur+0x18>)
 8000612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000616:	bf00      	nop
 8000618:	08000629 	.word	0x08000629
 800061c:	0800062f 	.word	0x0800062f
 8000620:	08000635 	.word	0x08000635
 8000624:	0800063b 	.word	0x0800063b
        case 0:
            base_addr = 0x80; // Row 0 starts at DDRAM 0x00 (command 0x80)
 8000628:	2380      	movs	r3, #128	@ 0x80
 800062a:	73fb      	strb	r3, [r7, #15]
            break;
 800062c:	e00b      	b.n	8000646 <lcd_put_cur+0x46>
        case 1:
            base_addr = 0xC0; // Row 1 starts at DDRAM 0x40 (command 0xC0)
 800062e:	23c0      	movs	r3, #192	@ 0xc0
 8000630:	73fb      	strb	r3, [r7, #15]
            break;
 8000632:	e008      	b.n	8000646 <lcd_put_cur+0x46>
        case 2:
            base_addr = 0x94; // Row 2 starts at DDRAM 0x14 (command 0x80 + 0x14 = 0x94)
 8000634:	2394      	movs	r3, #148	@ 0x94
 8000636:	73fb      	strb	r3, [r7, #15]
            break;
 8000638:	e005      	b.n	8000646 <lcd_put_cur+0x46>
        case 3:
            base_addr = 0xD4; // Row 3 starts at DDRAM 0x54 (command 0x80 + 0x54 = 0xD4)
 800063a:	23d4      	movs	r3, #212	@ 0xd4
 800063c:	73fb      	strb	r3, [r7, #15]
            break;
 800063e:	e002      	b.n	8000646 <lcd_put_cur+0x46>
        default:
            base_addr = 0x80; // Default to Row 0 if invalid input
 8000640:	2380      	movs	r3, #128	@ 0x80
 8000642:	73fb      	strb	r3, [r7, #15]
            break;
 8000644:	bf00      	nop
    }

    // Clamp column to 0–19 (valid for 20-column displays)
    if (col > 19) col = 19;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	2b13      	cmp	r3, #19
 800064a:	dd01      	ble.n	8000650 <lcd_put_cur+0x50>
 800064c:	2313      	movs	r3, #19
 800064e:	603b      	str	r3, [r7, #0]
    if (col < 0) col = 0;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	da01      	bge.n	800065a <lcd_put_cur+0x5a>
 8000656:	2300      	movs	r3, #0
 8000658:	603b      	str	r3, [r7, #0]

    // Send the final command: base address + column offset
    lcd_send_cmd(base_addr + col);
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	b2da      	uxtb	r2, r3
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	4413      	add	r3, r2
 8000662:	b2db      	uxtb	r3, r3
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff8d 	bl	8000584 <lcd_send_cmd>
}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop

08000674 <lcd_init>:


void lcd_init (void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000678:	2032      	movs	r0, #50	@ 0x32
 800067a:	f000 febf 	bl	80013fc <HAL_Delay>
	lcd_send_cmd (0x30);
 800067e:	2030      	movs	r0, #48	@ 0x30
 8000680:	f7ff ff80 	bl	8000584 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000684:	2005      	movs	r0, #5
 8000686:	f000 feb9 	bl	80013fc <HAL_Delay>
	lcd_send_cmd (0x30);
 800068a:	2030      	movs	r0, #48	@ 0x30
 800068c:	f7ff ff7a 	bl	8000584 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000690:	2001      	movs	r0, #1
 8000692:	f000 feb3 	bl	80013fc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000696:	2030      	movs	r0, #48	@ 0x30
 8000698:	f7ff ff74 	bl	8000584 <lcd_send_cmd>
	HAL_Delay(10);
 800069c:	200a      	movs	r0, #10
 800069e:	f000 fead 	bl	80013fc <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80006a2:	2020      	movs	r0, #32
 80006a4:	f7ff ff6e 	bl	8000584 <lcd_send_cmd>
	HAL_Delay(10);
 80006a8:	200a      	movs	r0, #10
 80006aa:	f000 fea7 	bl	80013fc <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80006ae:	2028      	movs	r0, #40	@ 0x28
 80006b0:	f7ff ff68 	bl	8000584 <lcd_send_cmd>
	HAL_Delay(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 fea1 	bl	80013fc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006ba:	2008      	movs	r0, #8
 80006bc:	f7ff ff62 	bl	8000584 <lcd_send_cmd>
	HAL_Delay(1);
 80006c0:	2001      	movs	r0, #1
 80006c2:	f000 fe9b 	bl	80013fc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80006c6:	2001      	movs	r0, #1
 80006c8:	f7ff ff5c 	bl	8000584 <lcd_send_cmd>
	HAL_Delay(1);
 80006cc:	2001      	movs	r0, #1
 80006ce:	f000 fe95 	bl	80013fc <HAL_Delay>
	HAL_Delay(1);
 80006d2:	2001      	movs	r0, #1
 80006d4:	f000 fe92 	bl	80013fc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006d8:	2006      	movs	r0, #6
 80006da:	f7ff ff53 	bl	8000584 <lcd_send_cmd>
	HAL_Delay(1);
 80006de:	2001      	movs	r0, #1
 80006e0:	f000 fe8c 	bl	80013fc <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006e4:	200c      	movs	r0, #12
 80006e6:	f7ff ff4d 	bl	8000584 <lcd_send_cmd>
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}

080006ee <lcd_send_string>:

void lcd_send_string (char *str)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80006f6:	e006      	b.n	8000706 <lcd_send_string+0x18>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	607a      	str	r2, [r7, #4]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff59 	bl	80005b8 <lcd_send_data>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1f4      	bne.n	80006f8 <lcd_send_string+0xa>
}
 800070e:	bf00      	nop
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071c:	f000 fdff 	bl	800131e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000720:	f000 f81c 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000724:	f000 f92c 	bl	8000980 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000728:	f000 f866 	bl	80007f8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800072c:	f000 f8fe 	bl	800092c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000730:	f000 f8ae 	bl	8000890 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000734:	4807      	ldr	r0, [pc, #28]	@ (8000754 <main+0x3c>)
 8000736:	f001 ffa9 	bl	800268c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 800073a:	4807      	ldr	r0, [pc, #28]	@ (8000758 <main+0x40>)
 800073c:	f001 ffa6 	bl	800268c <HAL_TIM_Base_Start>

  lcd_init();
 8000740:	f7ff ff98 	bl	8000674 <lcd_init>
  lcd_clear();
 8000744:	f7ff ff52 	bl	80005ec <lcd_clear>
  InitMenu();
 8000748:	f000 f9f8 	bl	8000b3c <InitMenu>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  PrintMenu();
 800074c:	f000 fb98 	bl	8000e80 <PrintMenu>
 8000750:	e7fc      	b.n	800074c <main+0x34>
 8000752:	bf00      	nop
 8000754:	20000078 	.word	0x20000078
 8000758:	200000b8 	.word	0x200000b8

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b092      	sub	sp, #72	@ 0x48
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2234      	movs	r2, #52	@ 0x34
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f002 fb74 	bl	8002e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	463b      	mov	r3, r7
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077e:	4b1d      	ldr	r3, [pc, #116]	@ (80007f4 <SystemClock_Config+0x98>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8000786:	4a1b      	ldr	r2, [pc, #108]	@ (80007f4 <SystemClock_Config+0x98>)
 8000788:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800078c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078e:	2302      	movs	r3, #2
 8000790:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000792:	2301      	movs	r3, #1
 8000794:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000796:	2310      	movs	r3, #16
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079a:	2302      	movs	r3, #2
 800079c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079e:	2300      	movs	r3, #0
 80007a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80007a2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80007a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80007a8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80007ac:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 f934 	bl	8001a20 <HAL_RCC_OscConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007be:	f000 f9b7 	bl	8000b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	230f      	movs	r3, #15
 80007c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c6:	2303      	movs	r3, #3
 80007c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	2101      	movs	r1, #1
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 fc50 	bl	8002080 <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007e6:	f000 f9a3 	bl	8000b30 <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3748      	adds	r7, #72	@ 0x48
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40007000 	.word	0x40007000

080007f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080c:	463b      	mov	r3, r7
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000814:	4b1d      	ldr	r3, [pc, #116]	@ (800088c <MX_TIM2_Init+0x94>)
 8000816:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800081a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 800081c:	4b1b      	ldr	r3, [pc, #108]	@ (800088c <MX_TIM2_Init+0x94>)
 800081e:	221f      	movs	r2, #31
 8000820:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000822:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <MX_TIM2_Init+0x94>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000828:	4b18      	ldr	r3, [pc, #96]	@ (800088c <MX_TIM2_Init+0x94>)
 800082a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800082e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000830:	4b16      	ldr	r3, [pc, #88]	@ (800088c <MX_TIM2_Init+0x94>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000836:	4b15      	ldr	r3, [pc, #84]	@ (800088c <MX_TIM2_Init+0x94>)
 8000838:	2280      	movs	r2, #128	@ 0x80
 800083a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800083c:	4813      	ldr	r0, [pc, #76]	@ (800088c <MX_TIM2_Init+0x94>)
 800083e:	f001 fee5 	bl	800260c <HAL_TIM_Base_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000848:	f000 f972 	bl	8000b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800084c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000850:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000852:	f107 0308 	add.w	r3, r7, #8
 8000856:	4619      	mov	r1, r3
 8000858:	480c      	ldr	r0, [pc, #48]	@ (800088c <MX_TIM2_Init+0x94>)
 800085a:	f001 ff61 	bl	8002720 <HAL_TIM_ConfigClockSource>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000864:	f000 f964 	bl	8000b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000868:	2300      	movs	r3, #0
 800086a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000870:	463b      	mov	r3, r7
 8000872:	4619      	mov	r1, r3
 8000874:	4805      	ldr	r0, [pc, #20]	@ (800088c <MX_TIM2_Init+0x94>)
 8000876:	f002 f927 	bl	8002ac8 <HAL_TIMEx_MasterConfigSynchronization>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000880:	f000 f956 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000078 	.word	0x20000078

08000890 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a4:	463b      	mov	r3, r7
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000924 <MX_TIM4_Init+0x94>)
 80008ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000928 <MX_TIM4_Init+0x98>)
 80008b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 31999;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <MX_TIM4_Init+0x94>)
 80008b4:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 80008b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000924 <MX_TIM4_Init+0x94>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80008c0:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <MX_TIM4_Init+0x94>)
 80008c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c8:	4b16      	ldr	r3, [pc, #88]	@ (8000924 <MX_TIM4_Init+0x94>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ce:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <MX_TIM4_Init+0x94>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008d4:	4813      	ldr	r0, [pc, #76]	@ (8000924 <MX_TIM4_Init+0x94>)
 80008d6:	f001 fe99 	bl	800260c <HAL_TIM_Base_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80008e0:	f000 f926 	bl	8000b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	4619      	mov	r1, r3
 80008f0:	480c      	ldr	r0, [pc, #48]	@ (8000924 <MX_TIM4_Init+0x94>)
 80008f2:	f001 ff15 	bl	8002720 <HAL_TIM_ConfigClockSource>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80008fc:	f000 f918 	bl	8000b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000900:	2300      	movs	r3, #0
 8000902:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	@ (8000924 <MX_TIM4_Init+0x94>)
 800090e:	f002 f8db 	bl	8002ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000918:	f000 f90a 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200000b8 	.word	0x200000b8
 8000928:	40000800 	.word	0x40000800

0800092c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000930:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_USART1_UART_Init+0x4c>)
 8000932:	4a12      	ldr	r2, [pc, #72]	@ (800097c <MX_USART1_UART_Init+0x50>)
 8000934:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000936:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <MX_USART1_UART_Init+0x4c>)
 8000938:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800093c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_USART1_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_USART1_UART_Init+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <MX_USART1_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_USART1_UART_Init+0x4c>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <MX_USART1_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_USART1_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_USART1_UART_Init+0x4c>)
 8000964:	f002 f90e 	bl	8002b84 <HAL_UART_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800096e:	f000 f8df 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200000f8 	.word	0x200000f8
 800097c:	40013800 	.word	0x40013800

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	4b62      	ldr	r3, [pc, #392]	@ (8000b20 <MX_GPIO_Init+0x1a0>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	4a61      	ldr	r2, [pc, #388]	@ (8000b20 <MX_GPIO_Init+0x1a0>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	61d3      	str	r3, [r2, #28]
 80009a2:	4b5f      	ldr	r3, [pc, #380]	@ (8000b20 <MX_GPIO_Init+0x1a0>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ae:	4b5c      	ldr	r3, [pc, #368]	@ (8000b20 <MX_GPIO_Init+0x1a0>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	4a5b      	ldr	r2, [pc, #364]	@ (8000b20 <MX_GPIO_Init+0x1a0>)
 80009b4:	f043 0320 	orr.w	r3, r3, #32
 80009b8:	61d3      	str	r3, [r2, #28]
 80009ba:	4b59      	ldr	r3, [pc, #356]	@ (8000b20 <MX_GPIO_Init+0x1a0>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	f003 0320 	and.w	r3, r3, #32
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b56      	ldr	r3, [pc, #344]	@ (8000b20 <MX_GPIO_Init+0x1a0>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	4a55      	ldr	r2, [pc, #340]	@ (8000b20 <MX_GPIO_Init+0x1a0>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	61d3      	str	r3, [r2, #28]
 80009d2:	4b53      	ldr	r3, [pc, #332]	@ (8000b20 <MX_GPIO_Init+0x1a0>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b50      	ldr	r3, [pc, #320]	@ (8000b20 <MX_GPIO_Init+0x1a0>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	4a4f      	ldr	r2, [pc, #316]	@ (8000b20 <MX_GPIO_Init+0x1a0>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	61d3      	str	r3, [r2, #28]
 80009ea:	4b4d      	ldr	r3, [pc, #308]	@ (8000b20 <MX_GPIO_Init+0x1a0>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2120      	movs	r1, #32
 80009fa:	484a      	ldr	r0, [pc, #296]	@ (8000b24 <MX_GPIO_Init+0x1a4>)
 80009fc:	f000 ffd5 	bl	80019aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_Pin|RW_Pin|RS_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8000a06:	4848      	ldr	r0, [pc, #288]	@ (8000b28 <MX_GPIO_Init+0x1a8>)
 8000a08:	f000 ffcf 	bl	80019aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D5_Pin|D4_Pin|D7_Pin|D6_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f24c 0106 	movw	r1, #49158	@ 0xc006
 8000a12:	4846      	ldr	r0, [pc, #280]	@ (8000b2c <MX_GPIO_Init+0x1ac>)
 8000a14:	f000 ffc9 	bl	80019aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	483e      	ldr	r0, [pc, #248]	@ (8000b28 <MX_GPIO_Init+0x1a8>)
 8000a30:	f000 fe14 	bl	800165c <HAL_GPIO_Init>

  /*Configure GPIO pin : RotaryEncoderRotateL_Pin */
  GPIO_InitStruct.Pin = RotaryEncoderRotateL_Pin;
 8000a34:	2301      	movs	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RotaryEncoderRotateL_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	4838      	ldr	r0, [pc, #224]	@ (8000b28 <MX_GPIO_Init+0x1a8>)
 8000a48:	f000 fe08 	bl	800165c <HAL_GPIO_Init>

  /*Configure GPIO pin : RotaryEncoderRotateR_Pin */
  GPIO_InitStruct.Pin = RotaryEncoderRotateR_Pin;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a50:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RotaryEncoderRotateR_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4831      	ldr	r0, [pc, #196]	@ (8000b28 <MX_GPIO_Init+0x1a8>)
 8000a62:	f000 fdfb 	bl	800165c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a66:	230c      	movs	r3, #12
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a76:	2307      	movs	r3, #7
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4828      	ldr	r0, [pc, #160]	@ (8000b24 <MX_GPIO_Init+0x1a4>)
 8000a82:	f000 fdeb 	bl	800165c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a86:	2320      	movs	r3, #32
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4821      	ldr	r0, [pc, #132]	@ (8000b24 <MX_GPIO_Init+0x1a4>)
 8000a9e:	f000 fddd 	bl	800165c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_Pin RW_Pin RS_Pin */
  GPIO_InitStruct.Pin = EN_Pin|RW_Pin|RS_Pin;
 8000aa2:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8000aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	481b      	ldr	r0, [pc, #108]	@ (8000b28 <MX_GPIO_Init+0x1a8>)
 8000abc:	f000 fdce 	bl	800165c <HAL_GPIO_Init>

  /*Configure GPIO pin : RotaryEncoderButton_Pin */
  GPIO_InitStruct.Pin = RotaryEncoderButton_Pin;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ac4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RotaryEncoderButton_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4815      	ldr	r0, [pc, #84]	@ (8000b2c <MX_GPIO_Init+0x1ac>)
 8000ad6:	f000 fdc1 	bl	800165c <HAL_GPIO_Init>

  /*Configure GPIO pins : D5_Pin D4_Pin D7_Pin D6_Pin */
  GPIO_InitStruct.Pin = D5_Pin|D4_Pin|D7_Pin|D6_Pin;
 8000ada:	f24c 0306 	movw	r3, #49158	@ 0xc006
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	480e      	ldr	r0, [pc, #56]	@ (8000b2c <MX_GPIO_Init+0x1ac>)
 8000af4:	f000 fdb2 	bl	800165c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2100      	movs	r1, #0
 8000afc:	2006      	movs	r0, #6
 8000afe:	f000 fd76 	bl	80015ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b02:	2006      	movs	r0, #6
 8000b04:	f000 fd8f 	bl	8001626 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2007      	movs	r0, #7
 8000b0e:	f000 fd6e 	bl	80015ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b12:	2007      	movs	r0, #7
 8000b14:	f000 fd87 	bl	8001626 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b18:	bf00      	nop
 8000b1a:	3728      	adds	r7, #40	@ 0x28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020000 	.word	0x40020000
 8000b28:	40020800 	.word	0x40020800
 8000b2c:	40020400 	.word	0x40020400

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <Error_Handler+0x8>

08000b3c <InitMenu>:
int nextNodeIndex = 0;                     //First free index
int childIndices[MAX_NODES][MAX_CHILDREN]; //Array used for child indexes
int selectedMenuIndex = 0;                 //The Selected Menu

void InitMenu()
{
 8000b3c:	b5b0      	push	{r4, r5, r7, lr}
 8000b3e:	b090      	sub	sp, #64	@ 0x40
 8000b40:	af00      	add	r7, sp, #0
	int root = addNode("Root", -1, (int[]){1, 2, 3, 4, 5, 6, 7}, 7);  //Creating the root of the menu
 8000b42:	4b32      	ldr	r3, [pc, #200]	@ (8000c0c <InitMenu+0xd0>)
 8000b44:	f107 0418 	add.w	r4, r7, #24
 8000b48:	461d      	mov	r5, r3
 8000b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000b56:	f107 0218 	add.w	r2, r7, #24
 8000b5a:	2307      	movs	r3, #7
 8000b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b60:	482b      	ldr	r0, [pc, #172]	@ (8000c10 <InitMenu+0xd4>)
 8000b62:	f000 f919 	bl	8000d98 <addNode>
 8000b66:	63f8      	str	r0, [r7, #60]	@ 0x3c
	int Option1 = addNode("Option 1", root, (int[]){8, 9, 10}, 3);    //Adding nodes and leaves to the menu
 8000b68:	4a2a      	ldr	r2, [pc, #168]	@ (8000c14 <InitMenu+0xd8>)
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000b74:	f107 020c 	add.w	r2, r7, #12
 8000b78:	2303      	movs	r3, #3
 8000b7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000b7c:	4826      	ldr	r0, [pc, #152]	@ (8000c18 <InitMenu+0xdc>)
 8000b7e:	f000 f90b 	bl	8000d98 <addNode>
 8000b82:	63b8      	str	r0, [r7, #56]	@ 0x38
	int Option2 = addNode("Option 2", root, (int[]){11, 12}, 2);      //Indexation should be calculated manually for non leaf nodes
 8000b84:	4a25      	ldr	r2, [pc, #148]	@ (8000c1c <InitMenu+0xe0>)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b8c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b90:	1d3a      	adds	r2, r7, #4
 8000b92:	2302      	movs	r3, #2
 8000b94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000b96:	4822      	ldr	r0, [pc, #136]	@ (8000c20 <InitMenu+0xe4>)
 8000b98:	f000 f8fe 	bl	8000d98 <addNode>
 8000b9c:	6378      	str	r0, [r7, #52]	@ 0x34
	addLeaf("Option 3", root, exampleFunction);
 8000b9e:	4a21      	ldr	r2, [pc, #132]	@ (8000c24 <InitMenu+0xe8>)
 8000ba0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000ba2:	4821      	ldr	r0, [pc, #132]	@ (8000c28 <InitMenu+0xec>)
 8000ba4:	f000 f8c8 	bl	8000d38 <addLeaf>
	addLeaf("Option 4", root, exampleFunction);
 8000ba8:	4a1e      	ldr	r2, [pc, #120]	@ (8000c24 <InitMenu+0xe8>)
 8000baa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000bac:	481f      	ldr	r0, [pc, #124]	@ (8000c2c <InitMenu+0xf0>)
 8000bae:	f000 f8c3 	bl	8000d38 <addLeaf>
	addLeaf("Option 5", root, exampleFunction);
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c24 <InitMenu+0xe8>)
 8000bb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000bb6:	481e      	ldr	r0, [pc, #120]	@ (8000c30 <InitMenu+0xf4>)
 8000bb8:	f000 f8be 	bl	8000d38 <addLeaf>
	addLeaf("Option 6", root, exampleFunction);
 8000bbc:	4a19      	ldr	r2, [pc, #100]	@ (8000c24 <InitMenu+0xe8>)
 8000bbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000bc0:	481c      	ldr	r0, [pc, #112]	@ (8000c34 <InitMenu+0xf8>)
 8000bc2:	f000 f8b9 	bl	8000d38 <addLeaf>
	addLeaf("Option 7", root, exampleFunction);
 8000bc6:	4a17      	ldr	r2, [pc, #92]	@ (8000c24 <InitMenu+0xe8>)
 8000bc8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000bca:	481b      	ldr	r0, [pc, #108]	@ (8000c38 <InitMenu+0xfc>)
 8000bcc:	f000 f8b4 	bl	8000d38 <addLeaf>

	addLeaf("Option 1.1", Option1, exampleFunction); //Adding sub menu to Option 1
 8000bd0:	4a14      	ldr	r2, [pc, #80]	@ (8000c24 <InitMenu+0xe8>)
 8000bd2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000bd4:	4819      	ldr	r0, [pc, #100]	@ (8000c3c <InitMenu+0x100>)
 8000bd6:	f000 f8af 	bl	8000d38 <addLeaf>
	addLeaf("Option 1.2", Option1, exampleFunction);
 8000bda:	4a12      	ldr	r2, [pc, #72]	@ (8000c24 <InitMenu+0xe8>)
 8000bdc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000bde:	4818      	ldr	r0, [pc, #96]	@ (8000c40 <InitMenu+0x104>)
 8000be0:	f000 f8aa 	bl	8000d38 <addLeaf>
	addLeaf("Option 1.3", Option1, exampleFunction);
 8000be4:	4a0f      	ldr	r2, [pc, #60]	@ (8000c24 <InitMenu+0xe8>)
 8000be6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000be8:	4816      	ldr	r0, [pc, #88]	@ (8000c44 <InitMenu+0x108>)
 8000bea:	f000 f8a5 	bl	8000d38 <addLeaf>

	addLeaf("Option 2.1", Option2, exampleFunction); //Adding sub menu to Option 2
 8000bee:	4a0d      	ldr	r2, [pc, #52]	@ (8000c24 <InitMenu+0xe8>)
 8000bf0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000bf2:	4815      	ldr	r0, [pc, #84]	@ (8000c48 <InitMenu+0x10c>)
 8000bf4:	f000 f8a0 	bl	8000d38 <addLeaf>
	addLeaf("Option 2.2", Option2, exampleFunction);
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <InitMenu+0xe8>)
 8000bfa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000bfc:	4813      	ldr	r0, [pc, #76]	@ (8000c4c <InitMenu+0x110>)
 8000bfe:	f000 f89b 	bl	8000d38 <addLeaf>
}
 8000c02:	bf00      	nop
 8000c04:	3740      	adds	r7, #64	@ 0x40
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bdb0      	pop	{r4, r5, r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	08003824 	.word	0x08003824
 8000c10:	0800378c 	.word	0x0800378c
 8000c14:	08003840 	.word	0x08003840
 8000c18:	08003794 	.word	0x08003794
 8000c1c:	0800384c 	.word	0x0800384c
 8000c20:	080037a0 	.word	0x080037a0
 8000c24:	08000f99 	.word	0x08000f99
 8000c28:	080037ac 	.word	0x080037ac
 8000c2c:	080037b8 	.word	0x080037b8
 8000c30:	080037c4 	.word	0x080037c4
 8000c34:	080037d0 	.word	0x080037d0
 8000c38:	080037dc 	.word	0x080037dc
 8000c3c:	080037e8 	.word	0x080037e8
 8000c40:	080037f4 	.word	0x080037f4
 8000c44:	08003800 	.word	0x08003800
 8000c48:	0800380c 	.word	0x0800380c
 8000c4c:	08003818 	.word	0x08003818

08000c50 <printChildren>:

void printChildren(int index) { // Prints all the children of index node
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

	// Gets the array of the children and their quantity
	int* children = getChildren(index);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f000 f8f5 	bl	8000e48 <getChildren>
 8000c5e:	61b8      	str	r0, [r7, #24]
	int total_children = tree[index].numChildren;
 8000c60:	4a31      	ldr	r2, [pc, #196]	@ (8000d28 <printChildren+0xd8>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	015b      	lsls	r3, r3, #5
 8000c66:	4413      	add	r3, r2
 8000c68:	3314      	adds	r3, #20
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	617b      	str	r3, [r7, #20]

	// Ensure rotary counter stays within valid range
	rotary_encoder_counter = (rotary_encoder_counter < 0) ? 0 :
 8000c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d2c <printChildren+0xdc>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	db0a      	blt.n	8000c8c <printChildren+0x3c>
							(rotary_encoder_counter >= total_children) ? total_children - 1 :
 8000c76:	4b2d      	ldr	r3, [pc, #180]	@ (8000d2c <printChildren+0xdc>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dc02      	bgt.n	8000c86 <printChildren+0x36>
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	e003      	b.n	8000c8e <printChildren+0x3e>
 8000c86:	4b29      	ldr	r3, [pc, #164]	@ (8000d2c <printChildren+0xdc>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	e000      	b.n	8000c8e <printChildren+0x3e>
	rotary_encoder_counter = (rotary_encoder_counter < 0) ? 0 :
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4a27      	ldr	r2, [pc, #156]	@ (8000d2c <printChildren+0xdc>)
 8000c90:	6013      	str	r3, [r2, #0]
							rotary_encoder_counter;

	// Calculate scroll offset
	int max_offset = (total_children > 4) ? (total_children - 4) : 0;
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	2b04      	cmp	r3, #4
 8000c96:	bfb8      	it	lt
 8000c98:	2304      	movlt	r3, #4
 8000c9a:	3b04      	subs	r3, #4
 8000c9c:	613b      	str	r3, [r7, #16]
	int offset = rotary_encoder_counter - 3;
 8000c9e:	4b23      	ldr	r3, [pc, #140]	@ (8000d2c <printChildren+0xdc>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	3b03      	subs	r3, #3
 8000ca4:	60fb      	str	r3, [r7, #12]
	offset = (offset < 0) ? 0 : (offset > max_offset) ? max_offset : offset;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	db05      	blt.n	8000cb8 <printChildren+0x68>
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	bfa8      	it	ge
 8000cb4:	4613      	movge	r3, r2
 8000cb6:	e000      	b.n	8000cba <printChildren+0x6a>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]

	// Display visible items
	for (int row = 0; row < 4; row++) {
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
 8000cc0:	e02a      	b.n	8000d18 <printChildren+0xc8>
		int item_idx = offset + row;
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	60bb      	str	r3, [r7, #8]
		lcd_put_cur(row, 0);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	69f8      	ldr	r0, [r7, #28]
 8000cce:	f7ff fc97 	bl	8000600 <lcd_put_cur>
		if (item_idx >= total_children) continue;
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	da1a      	bge.n	8000d10 <printChildren+0xc0>

		// Draw cursor
		lcd_put_cur(row, 0);
 8000cda:	2100      	movs	r1, #0
 8000cdc:	69f8      	ldr	r0, [r7, #28]
 8000cde:	f7ff fc8f 	bl	8000600 <lcd_put_cur>
		lcd_send_string((item_idx == rotary_encoder_counter) ? ">" : " ");
 8000ce2:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <printChildren+0xdc>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d101      	bne.n	8000cf0 <printChildren+0xa0>
 8000cec:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <printChildren+0xe0>)
 8000cee:	e000      	b.n	8000cf2 <printChildren+0xa2>
 8000cf0:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <printChildren+0xe4>)
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fcfb 	bl	80006ee <lcd_send_string>

		// Draw menu label
		lcd_send_string(tree[children[item_idx]].label);
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4413      	add	r3, r2
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	015b      	lsls	r3, r3, #5
 8000d04:	4a08      	ldr	r2, [pc, #32]	@ (8000d28 <printChildren+0xd8>)
 8000d06:	4413      	add	r3, r2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fcf0 	bl	80006ee <lcd_send_string>
 8000d0e:	e000      	b.n	8000d12 <printChildren+0xc2>
		if (item_idx >= total_children) continue;
 8000d10:	bf00      	nop
	for (int row = 0; row < 4; row++) {
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3301      	adds	r3, #1
 8000d16:	61fb      	str	r3, [r7, #28]
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	2b03      	cmp	r3, #3
 8000d1c:	ddd1      	ble.n	8000cc2 <printChildren+0x72>
	}
}
 8000d1e:	bf00      	nop
 8000d20:	bf00      	nop
 8000d22:	3720      	adds	r7, #32
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000140 	.word	0x20000140
 8000d2c:	20001d68 	.word	0x20001d68
 8000d30:	08003854 	.word	0x08003854
 8000d34:	08003858 	.word	0x08003858

08000d38 <addLeaf>:

void addLeaf(const char* label, int parentIndex, LeafFunc func) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
    if (nextNodeIndex >= MAX_NODES) return; //-1; // Array full
 8000d44:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <addLeaf+0x54>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b63      	cmp	r3, #99	@ 0x63
 8000d4a:	dc1a      	bgt.n	8000d82 <addLeaf+0x4a>

    TreeNode* node = &tree[nextNodeIndex];
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <addLeaf+0x54>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	015b      	lsls	r3, r3, #5
 8000d52:	4a0f      	ldr	r2, [pc, #60]	@ (8000d90 <addLeaf+0x58>)
 8000d54:	4413      	add	r3, r2
 8000d56:	617b      	str	r3, [r7, #20]
    snprintf(node->label, 20, "%s", label);
 8000d58:	6978      	ldr	r0, [r7, #20]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d94 <addLeaf+0x5c>)
 8000d5e:	2114      	movs	r1, #20
 8000d60:	f002 f844 	bl	8002dec <sniprintf>
    node->numChildren = 0;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	2200      	movs	r2, #0
 8000d68:	615a      	str	r2, [r3, #20]
    node->parentIndex = parentIndex;
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	68ba      	ldr	r2, [r7, #8]
 8000d6e:	619a      	str	r2, [r3, #24]
    node->funcOrChildren = (void*)func; // Store function pointer
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	61da      	str	r2, [r3, #28]
    nextNodeIndex++;
 8000d76:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <addLeaf+0x54>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	4a03      	ldr	r2, [pc, #12]	@ (8000d8c <addLeaf+0x54>)
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	e000      	b.n	8000d84 <addLeaf+0x4c>
    if (nextNodeIndex >= MAX_NODES) return; //-1; // Array full
 8000d82:	bf00      	nop
    //return nextNodeIndex++;
}
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000dc0 	.word	0x20000dc0
 8000d90:	20000140 	.word	0x20000140
 8000d94:	0800385c 	.word	0x0800385c

08000d98 <addNode>:

int addNode(const char* label, int parentIndex, int children[], int numChildren) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	603b      	str	r3, [r7, #0]
    if (nextNodeIndex >= MAX_NODES || numChildren > MAX_CHILDREN) return -1;
 8000da6:	4b24      	ldr	r3, [pc, #144]	@ (8000e38 <addNode+0xa0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b63      	cmp	r3, #99	@ 0x63
 8000dac:	dc02      	bgt.n	8000db4 <addNode+0x1c>
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	2b0a      	cmp	r3, #10
 8000db2:	dd02      	ble.n	8000dba <addNode+0x22>
 8000db4:	f04f 33ff 	mov.w	r3, #4294967295
 8000db8:	e03a      	b.n	8000e30 <addNode+0x98>

    TreeNode* node = &tree[nextNodeIndex];
 8000dba:	4b1f      	ldr	r3, [pc, #124]	@ (8000e38 <addNode+0xa0>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	015b      	lsls	r3, r3, #5
 8000dc0:	4a1e      	ldr	r2, [pc, #120]	@ (8000e3c <addNode+0xa4>)
 8000dc2:	4413      	add	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
    snprintf(node->label, 20, "%s", label);
 8000dc6:	6938      	ldr	r0, [r7, #16]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4a1d      	ldr	r2, [pc, #116]	@ (8000e40 <addNode+0xa8>)
 8000dcc:	2114      	movs	r1, #20
 8000dce:	f002 f80d 	bl	8002dec <sniprintf>
    node->numChildren = numChildren;
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	615a      	str	r2, [r3, #20]
    node->parentIndex = parentIndex;
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	619a      	str	r2, [r3, #24]

    // Store child indices in global array
    for (int i = 0; i < numChildren; i++) {
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	e012      	b.n	8000e0a <addNode+0x72>
        childIndices[nextNodeIndex][i] = children[i];
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a12      	ldr	r2, [pc, #72]	@ (8000e38 <addNode+0xa0>)
 8000dee:	6812      	ldr	r2, [r2, #0]
 8000df0:	6819      	ldr	r1, [r3, #0]
 8000df2:	4814      	ldr	r0, [pc, #80]	@ (8000e44 <addNode+0xac>)
 8000df4:	4613      	mov	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	697a      	ldr	r2, [r7, #20]
 8000dfe:	4413      	add	r3, r2
 8000e00:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    for (int i = 0; i < numChildren; i++) {
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	3301      	adds	r3, #1
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	dbe8      	blt.n	8000de4 <addNode+0x4c>
    }
    node->funcOrChildren = &childIndices[nextNodeIndex]; // Points to child indices
 8000e12:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <addNode+0xa0>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	4613      	mov	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4413      	add	r3, r2
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	4a09      	ldr	r2, [pc, #36]	@ (8000e44 <addNode+0xac>)
 8000e20:	441a      	add	r2, r3
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	61da      	str	r2, [r3, #28]

    return nextNodeIndex++;
 8000e26:	4b04      	ldr	r3, [pc, #16]	@ (8000e38 <addNode+0xa0>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	1c5a      	adds	r2, r3, #1
 8000e2c:	4902      	ldr	r1, [pc, #8]	@ (8000e38 <addNode+0xa0>)
 8000e2e:	600a      	str	r2, [r1, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000dc0 	.word	0x20000dc0
 8000e3c:	20000140 	.word	0x20000140
 8000e40:	0800385c 	.word	0x0800385c
 8000e44:	20000dc4 	.word	0x20000dc4

08000e48 <getChildren>:

int* getChildren(int nodeIndex) {
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
    if (tree[nodeIndex].numChildren == 0) return NULL;
 8000e50:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <getChildren+0x34>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	015b      	lsls	r3, r3, #5
 8000e56:	4413      	add	r3, r2
 8000e58:	3314      	adds	r3, #20
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d101      	bne.n	8000e64 <getChildren+0x1c>
 8000e60:	2300      	movs	r3, #0
 8000e62:	e005      	b.n	8000e70 <getChildren+0x28>
    return (int*)tree[nodeIndex].funcOrChildren;
 8000e64:	4a05      	ldr	r2, [pc, #20]	@ (8000e7c <getChildren+0x34>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	015b      	lsls	r3, r3, #5
 8000e6a:	4413      	add	r3, r2
 8000e6c:	331c      	adds	r3, #28
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000140 	.word	0x20000140

08000e80 <PrintMenu>:
void PrintMenu()
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	printChildren(selectedMenuIndex);
 8000e84:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb0 <PrintMenu+0x30>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fee1 	bl	8000c50 <printChildren>
	if(buttonState==1)
 8000e8e:	4b09      	ldr	r3, [pc, #36]	@ (8000eb4 <PrintMenu+0x34>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d101      	bne.n	8000e9a <PrintMenu+0x1a>
	{
		OpenMenu();
 8000e96:	f000 f80f 	bl	8000eb8 <OpenMenu>
	}
	if(buttonState==2)
 8000e9a:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <PrintMenu+0x34>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d101      	bne.n	8000ea6 <PrintMenu+0x26>
	{
		CloseMenu();
 8000ea2:	f000 f841 	bl	8000f28 <CloseMenu>
	}
	buttonState = 0;
 8000ea6:	4b03      	ldr	r3, [pc, #12]	@ (8000eb4 <PrintMenu+0x34>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20001d64 	.word	0x20001d64
 8000eb4:	20001d70 	.word	0x20001d70

08000eb8 <OpenMenu>:
void OpenMenu()  //Opens the selected option from the rotary encoder input
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
	lcd_clear();
 8000ebe:	f7ff fb95 	bl	80005ec <lcd_clear>
	int* children = getChildren(selectedMenuIndex);
 8000ec2:	4b17      	ldr	r3, [pc, #92]	@ (8000f20 <OpenMenu+0x68>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ffbe 	bl	8000e48 <getChildren>
 8000ecc:	6078      	str	r0, [r7, #4]
	if(isLeaf(children[rotary_encoder_counter]))
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <OpenMenu+0x6c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f872 	bl	8000fc4 <isLeaf>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d00c      	beq.n	8000f00 <OpenMenu+0x48>
	{
		executeLeafFunction(children[rotary_encoder_counter]);
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <OpenMenu+0x6c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	4413      	add	r3, r2
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 f836 	bl	8000f64 <executeLeafFunction>
        rotary_encoder_counter = 0;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <OpenMenu+0x6c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
	}
	else{
		selectedMenuIndex = children[rotary_encoder_counter];
		rotary_encoder_counter = 0;
	}
}
 8000efe:	e00a      	b.n	8000f16 <OpenMenu+0x5e>
		selectedMenuIndex = children[rotary_encoder_counter];
 8000f00:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <OpenMenu+0x6c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <OpenMenu+0x68>)
 8000f0e:	6013      	str	r3, [r2, #0]
		rotary_encoder_counter = 0;
 8000f10:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <OpenMenu+0x6c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20001d64 	.word	0x20001d64
 8000f24:	20001d68 	.word	0x20001d68

08000f28 <CloseMenu>:
void CloseMenu() //Goes back to the parent of the selected node
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	//Checks if the node isn't the root node
	if((tree[selectedMenuIndex].parentIndex) != -1){
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f5c <CloseMenu+0x34>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0b      	ldr	r2, [pc, #44]	@ (8000f60 <CloseMenu+0x38>)
 8000f32:	015b      	lsls	r3, r3, #5
 8000f34:	4413      	add	r3, r2
 8000f36:	3318      	adds	r3, #24
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3e:	d00a      	beq.n	8000f56 <CloseMenu+0x2e>
		lcd_clear();
 8000f40:	f7ff fb54 	bl	80005ec <lcd_clear>
		selectedMenuIndex = tree[selectedMenuIndex].parentIndex;
 8000f44:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <CloseMenu+0x34>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a05      	ldr	r2, [pc, #20]	@ (8000f60 <CloseMenu+0x38>)
 8000f4a:	015b      	lsls	r3, r3, #5
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3318      	adds	r3, #24
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a02      	ldr	r2, [pc, #8]	@ (8000f5c <CloseMenu+0x34>)
 8000f54:	6013      	str	r3, [r2, #0]
	}
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20001d64 	.word	0x20001d64
 8000f60:	20000140 	.word	0x20000140

08000f64 <executeLeafFunction>:
void executeLeafFunction(int nodeIndex) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
    if(tree[nodeIndex].funcOrChildren) {
 8000f6c:	4a09      	ldr	r2, [pc, #36]	@ (8000f94 <executeLeafFunction+0x30>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	015b      	lsls	r3, r3, #5
 8000f72:	4413      	add	r3, r2
 8000f74:	331c      	adds	r3, #28
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d006      	beq.n	8000f8a <executeLeafFunction+0x26>
        ((LeafFunc)tree[nodeIndex].funcOrChildren)();
 8000f7c:	4a05      	ldr	r2, [pc, #20]	@ (8000f94 <executeLeafFunction+0x30>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	015b      	lsls	r3, r3, #5
 8000f82:	4413      	add	r3, r2
 8000f84:	331c      	adds	r3, #28
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4798      	blx	r3
    }
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000140 	.word	0x20000140

08000f98 <exampleFunction>:
void exampleFunction()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	lcd_clear();
 8000f9c:	f7ff fb26 	bl	80005ec <lcd_clear>
	lcd_put_cur(0, 0);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff fb2c 	bl	8000600 <lcd_put_cur>
	lcd_send_string("Function executed!");
 8000fa8:	4805      	ldr	r0, [pc, #20]	@ (8000fc0 <exampleFunction+0x28>)
 8000faa:	f7ff fba0 	bl	80006ee <lcd_send_string>
	HAL_Delay(1000);
 8000fae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fb2:	f000 fa23 	bl	80013fc <HAL_Delay>
	lcd_clear();
 8000fb6:	f7ff fb19 	bl	80005ec <lcd_clear>
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	08003860 	.word	0x08003860

08000fc4 <isLeaf>:
uint8_t isLeaf(int selectedIndex)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	if(tree[selectedIndex].numChildren == 0)
 8000fcc:	4a07      	ldr	r2, [pc, #28]	@ (8000fec <isLeaf+0x28>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	015b      	lsls	r3, r3, #5
 8000fd2:	4413      	add	r3, r2
 8000fd4:	3314      	adds	r3, #20
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d101      	bne.n	8000fe0 <isLeaf+0x1c>
	{
		return 1;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e000      	b.n	8000fe2 <isLeaf+0x1e>
	}
	else{
		return 0;
 8000fe0:	2300      	movs	r3, #0
	}
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	20000140 	.word	0x20000140

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000ff6:	4b15      	ldr	r3, [pc, #84]	@ (800104c <HAL_MspInit+0x5c>)
 8000ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ffa:	4a14      	ldr	r2, [pc, #80]	@ (800104c <HAL_MspInit+0x5c>)
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001000:	6253      	str	r3, [r2, #36]	@ 0x24
 8001002:	4b12      	ldr	r3, [pc, #72]	@ (800104c <HAL_MspInit+0x5c>)
 8001004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001006:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <HAL_MspInit+0x5c>)
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	4a0e      	ldr	r2, [pc, #56]	@ (800104c <HAL_MspInit+0x5c>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6213      	str	r3, [r2, #32]
 800101a:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <HAL_MspInit+0x5c>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <HAL_MspInit+0x5c>)
 8001028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800102a:	4a08      	ldr	r2, [pc, #32]	@ (800104c <HAL_MspInit+0x5c>)
 800102c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001030:	6253      	str	r3, [r2, #36]	@ 0x24
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <HAL_MspInit+0x5c>)
 8001034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800103e:	2007      	movs	r0, #7
 8001040:	f000 faca 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40023800 	.word	0x40023800

08001050 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001060:	d10c      	bne.n	800107c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001062:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <HAL_TIM_Base_MspInit+0x58>)
 8001064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001066:	4a10      	ldr	r2, [pc, #64]	@ (80010a8 <HAL_TIM_Base_MspInit+0x58>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6253      	str	r3, [r2, #36]	@ 0x24
 800106e:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <HAL_TIM_Base_MspInit+0x58>)
 8001070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800107a:	e010      	b.n	800109e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0a      	ldr	r2, [pc, #40]	@ (80010ac <HAL_TIM_Base_MspInit+0x5c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d10b      	bne.n	800109e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001086:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <HAL_TIM_Base_MspInit+0x58>)
 8001088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108a:	4a07      	ldr	r2, [pc, #28]	@ (80010a8 <HAL_TIM_Base_MspInit+0x58>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	6253      	str	r3, [r2, #36]	@ 0x24
 8001092:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <HAL_TIM_Base_MspInit+0x58>)
 8001094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40000800 	.word	0x40000800

080010b0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	@ 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a17      	ldr	r2, [pc, #92]	@ (800112c <HAL_UART_MspInit+0x7c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d128      	bne.n	8001124 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010d2:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <HAL_UART_MspInit+0x80>)
 80010d4:	6a1b      	ldr	r3, [r3, #32]
 80010d6:	4a16      	ldr	r2, [pc, #88]	@ (8001130 <HAL_UART_MspInit+0x80>)
 80010d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010dc:	6213      	str	r3, [r2, #32]
 80010de:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <HAL_UART_MspInit+0x80>)
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <HAL_UART_MspInit+0x80>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	4a10      	ldr	r2, [pc, #64]	@ (8001130 <HAL_UART_MspInit+0x80>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	61d3      	str	r3, [r2, #28]
 80010f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <HAL_UART_MspInit+0x80>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001102:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001114:	2307      	movs	r3, #7
 8001116:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4619      	mov	r1, r3
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <HAL_UART_MspInit+0x84>)
 8001120:	f000 fa9c 	bl	800165c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001124:	bf00      	nop
 8001126:	3728      	adds	r7, #40	@ 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40013800 	.word	0x40013800
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000

08001138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <NMI_Handler+0x4>

08001140 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <HardFault_Handler+0x4>

08001148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <MemManage_Handler+0x4>

08001150 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <BusFault_Handler+0x4>

08001158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <UsageFault_Handler+0x4>

08001160 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001188:	f000 f91c 	bl	80013c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}

08001190 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if(HAL_GPIO_ReadPin(RotaryEncoderButton_GPIO_Port, RotaryEncoderButton_Pin)==GPIO_PIN_RESET)
 8001194:	2101      	movs	r1, #1
 8001196:	4819      	ldr	r0, [pc, #100]	@ (80011fc <EXTI0_IRQHandler+0x6c>)
 8001198:	f000 fbf0 	bl	800197c <HAL_GPIO_ReadPin>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d107      	bne.n	80011b2 <EXTI0_IRQHandler+0x22>
	{
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 80011a2:	4b17      	ldr	r3, [pc, #92]	@ (8001200 <EXTI0_IRQHandler+0x70>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2200      	movs	r2, #0
 80011a8:	625a      	str	r2, [r3, #36]	@ 0x24
		rotary_button_endtick = 0;
 80011aa:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <EXTI0_IRQHandler+0x74>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	e005      	b.n	80011be <EXTI0_IRQHandler+0x2e>
	}
	else{
	  rotary_button_endtick = __HAL_TIM_GET_COUNTER(&htim4);
 80011b2:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <EXTI0_IRQHandler+0x70>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <EXTI0_IRQHandler+0x74>)
 80011bc:	601a      	str	r2, [r3, #0]
	}

	if(rotary_button_endtick > 50 && rotary_button_endtick < 1000)
 80011be:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <EXTI0_IRQHandler+0x74>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b32      	cmp	r3, #50	@ 0x32
 80011c4:	dd07      	ble.n	80011d6 <EXTI0_IRQHandler+0x46>
 80011c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <EXTI0_IRQHandler+0x74>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011ce:	da02      	bge.n	80011d6 <EXTI0_IRQHandler+0x46>
	{
		buttonState = 1;
 80011d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001208 <EXTI0_IRQHandler+0x78>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	601a      	str	r2, [r3, #0]
	}
	if(rotary_button_endtick >= 1000 && rotary_button_endtick < 3000)
 80011d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001204 <EXTI0_IRQHandler+0x74>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011de:	db08      	blt.n	80011f2 <EXTI0_IRQHandler+0x62>
 80011e0:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <EXTI0_IRQHandler+0x74>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80011e8:	4293      	cmp	r3, r2
 80011ea:	dc02      	bgt.n	80011f2 <EXTI0_IRQHandler+0x62>
	{
		buttonState = 2;
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <EXTI0_IRQHandler+0x78>)
 80011ee:	2202      	movs	r2, #2
 80011f0:	601a      	str	r2, [r3, #0]
	}


  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RotaryEncoderButton_Pin);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f000 fbf2 	bl	80019dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40020400 	.word	0x40020400
 8001200:	200000b8 	.word	0x200000b8
 8001204:	20001d6c 	.word	0x20001d6c
 8001208:	20001d70 	.word	0x20001d70

0800120c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	delay(2000);
 8001210:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001214:	f7ff f94c 	bl	80004b0 <delay>
	if(HAL_GPIO_ReadPin(RotaryEncoderRotateR_GPIO_Port, RotaryEncoderRotateR_Pin) == GPIO_PIN_RESET){
 8001218:	2102      	movs	r1, #2
 800121a:	480e      	ldr	r0, [pc, #56]	@ (8001254 <EXTI1_IRQHandler+0x48>)
 800121c:	f000 fbae 	bl	800197c <HAL_GPIO_ReadPin>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d111      	bne.n	800124a <EXTI1_IRQHandler+0x3e>
		if(HAL_GPIO_ReadPin(RotaryEncoderRotateL_GPIO_Port, RotaryEncoderRotateL_Pin) == GPIO_PIN_SET){
 8001226:	2101      	movs	r1, #1
 8001228:	480a      	ldr	r0, [pc, #40]	@ (8001254 <EXTI1_IRQHandler+0x48>)
 800122a:	f000 fba7 	bl	800197c <HAL_GPIO_ReadPin>
 800122e:	4603      	mov	r3, r0
 8001230:	2b01      	cmp	r3, #1
 8001232:	d105      	bne.n	8001240 <EXTI1_IRQHandler+0x34>
		  rotary_encoder_counter++;
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <EXTI1_IRQHandler+0x4c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	3301      	adds	r3, #1
 800123a:	4a07      	ldr	r2, [pc, #28]	@ (8001258 <EXTI1_IRQHandler+0x4c>)
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e004      	b.n	800124a <EXTI1_IRQHandler+0x3e>
	  }else{
		  rotary_encoder_counter--;
 8001240:	4b05      	ldr	r3, [pc, #20]	@ (8001258 <EXTI1_IRQHandler+0x4c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3b01      	subs	r3, #1
 8001246:	4a04      	ldr	r2, [pc, #16]	@ (8001258 <EXTI1_IRQHandler+0x4c>)
 8001248:	6013      	str	r3, [r2, #0]
	  }

	}
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RotaryEncoderRotateR_Pin);
 800124a:	2002      	movs	r0, #2
 800124c:	f000 fbc6 	bl	80019dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */


  /* USER CODE END EXTI1_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40020800 	.word	0x40020800
 8001258:	20001d68 	.word	0x20001d68

0800125c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001264:	4a14      	ldr	r2, [pc, #80]	@ (80012b8 <_sbrk+0x5c>)
 8001266:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <_sbrk+0x60>)
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001270:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <_sbrk+0x64>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d102      	bne.n	800127e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001278:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <_sbrk+0x64>)
 800127a:	4a12      	ldr	r2, [pc, #72]	@ (80012c4 <_sbrk+0x68>)
 800127c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800127e:	4b10      	ldr	r3, [pc, #64]	@ (80012c0 <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	429a      	cmp	r2, r3
 800128a:	d207      	bcs.n	800129c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800128c:	f001 fdec 	bl	8002e68 <__errno>
 8001290:	4603      	mov	r3, r0
 8001292:	220c      	movs	r2, #12
 8001294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	e009      	b.n	80012b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800129c:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <_sbrk+0x64>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a2:	4b07      	ldr	r3, [pc, #28]	@ (80012c0 <_sbrk+0x64>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	4a05      	ldr	r2, [pc, #20]	@ (80012c0 <_sbrk+0x64>)
 80012ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ae:	68fb      	ldr	r3, [r7, #12]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20014000 	.word	0x20014000
 80012bc:	00000400 	.word	0x00000400
 80012c0:	20001d74 	.word	0x20001d74
 80012c4:	20001ec8 	.word	0x20001ec8

080012c8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80012d4:	f7ff fff8 	bl	80012c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d8:	480b      	ldr	r0, [pc, #44]	@ (8001308 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012da:	490c      	ldr	r1, [pc, #48]	@ (800130c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001310 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e0:	e002      	b.n	80012e8 <LoopCopyDataInit>

080012e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e6:	3304      	adds	r3, #4

080012e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ec:	d3f9      	bcc.n	80012e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ee:	4a09      	ldr	r2, [pc, #36]	@ (8001314 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012f0:	4c09      	ldr	r4, [pc, #36]	@ (8001318 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f4:	e001      	b.n	80012fa <LoopFillZerobss>

080012f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f8:	3204      	adds	r2, #4

080012fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012fc:	d3fb      	bcc.n	80012f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012fe:	f001 fdb9 	bl	8002e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001302:	f7ff fa09 	bl	8000718 <main>
  bx lr
 8001306:	4770      	bx	lr
  ldr r0, =_sdata
 8001308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800130c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001310:	080038dc 	.word	0x080038dc
  ldr r2, =_sbss
 8001314:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001318:	20001ec4 	.word	0x20001ec4

0800131c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800131c:	e7fe      	b.n	800131c <ADC1_IRQHandler>

0800131e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001328:	2003      	movs	r0, #3
 800132a:	f000 f955 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800132e:	2000      	movs	r0, #0
 8001330:	f000 f80e 	bl	8001350 <HAL_InitTick>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	71fb      	strb	r3, [r7, #7]
 800133e:	e001      	b.n	8001344 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001340:	f7ff fe56 	bl	8000ff0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001344:	79fb      	ldrb	r3, [r7, #7]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800135c:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <HAL_InitTick+0x68>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d022      	beq.n	80013aa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001364:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <HAL_InitTick+0x6c>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b13      	ldr	r3, [pc, #76]	@ (80013b8 <HAL_InitTick+0x68>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001370:	fbb1 f3f3 	udiv	r3, r1, r3
 8001374:	fbb2 f3f3 	udiv	r3, r2, r3
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f962 	bl	8001642 <HAL_SYSTICK_Config>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10f      	bne.n	80013a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b0f      	cmp	r3, #15
 8001388:	d809      	bhi.n	800139e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138a:	2200      	movs	r2, #0
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	f04f 30ff 	mov.w	r0, #4294967295
 8001392:	f000 f92c 	bl	80015ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001396:	4a0a      	ldr	r2, [pc, #40]	@ (80013c0 <HAL_InitTick+0x70>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	e007      	b.n	80013ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	73fb      	strb	r3, [r7, #15]
 80013a2:	e004      	b.n	80013ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	e001      	b.n	80013ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000008 	.word	0x20000008
 80013bc:	20000000 	.word	0x20000000
 80013c0:	20000004 	.word	0x20000004

080013c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c8:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <HAL_IncTick+0x1c>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <HAL_IncTick+0x20>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a03      	ldr	r2, [pc, #12]	@ (80013e0 <HAL_IncTick+0x1c>)
 80013d4:	6013      	str	r3, [r2, #0]
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20001d78 	.word	0x20001d78
 80013e4:	20000008 	.word	0x20000008

080013e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return uwTick;
 80013ec:	4b02      	ldr	r3, [pc, #8]	@ (80013f8 <HAL_GetTick+0x10>)
 80013ee:	681b      	ldr	r3, [r3, #0]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	20001d78 	.word	0x20001d78

080013fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001404:	f7ff fff0 	bl	80013e8 <HAL_GetTick>
 8001408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001414:	d004      	beq.n	8001420 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001416:	4b09      	ldr	r3, [pc, #36]	@ (800143c <HAL_Delay+0x40>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	4413      	add	r3, r2
 800141e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001420:	bf00      	nop
 8001422:	f7ff ffe1 	bl	80013e8 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	429a      	cmp	r2, r3
 8001430:	d8f7      	bhi.n	8001422 <HAL_Delay+0x26>
  {
  }
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000008 	.word	0x20000008

08001440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001450:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800145c:	4013      	ands	r3, r2
 800145e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001468:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800146c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001472:	4a04      	ldr	r2, [pc, #16]	@ (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	60d3      	str	r3, [r2, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800148c:	4b04      	ldr	r3, [pc, #16]	@ (80014a0 <__NVIC_GetPriorityGrouping+0x18>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	f003 0307 	and.w	r3, r3, #7
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	db0b      	blt.n	80014ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f003 021f 	and.w	r2, r3, #31
 80014bc:	4906      	ldr	r1, [pc, #24]	@ (80014d8 <__NVIC_EnableIRQ+0x34>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	095b      	lsrs	r3, r3, #5
 80014c4:	2001      	movs	r0, #1
 80014c6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	e000e100 	.word	0xe000e100

080014dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	db0a      	blt.n	8001506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	490c      	ldr	r1, [pc, #48]	@ (8001528 <__NVIC_SetPriority+0x4c>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	0112      	lsls	r2, r2, #4
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	440b      	add	r3, r1
 8001500:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001504:	e00a      	b.n	800151c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4908      	ldr	r1, [pc, #32]	@ (800152c <__NVIC_SetPriority+0x50>)
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	3b04      	subs	r3, #4
 8001514:	0112      	lsls	r2, r2, #4
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	440b      	add	r3, r1
 800151a:	761a      	strb	r2, [r3, #24]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000e100 	.word	0xe000e100
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001530:	b480      	push	{r7}
 8001532:	b089      	sub	sp, #36	@ 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f1c3 0307 	rsb	r3, r3, #7
 800154a:	2b04      	cmp	r3, #4
 800154c:	bf28      	it	cs
 800154e:	2304      	movcs	r3, #4
 8001550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3304      	adds	r3, #4
 8001556:	2b06      	cmp	r3, #6
 8001558:	d902      	bls.n	8001560 <NVIC_EncodePriority+0x30>
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3b03      	subs	r3, #3
 800155e:	e000      	b.n	8001562 <NVIC_EncodePriority+0x32>
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	f04f 32ff 	mov.w	r2, #4294967295
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	401a      	ands	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001578:	f04f 31ff 	mov.w	r1, #4294967295
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	43d9      	mvns	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	4313      	orrs	r3, r2
         );
}
 800158a:	4618      	mov	r0, r3
 800158c:	3724      	adds	r7, #36	@ 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015a4:	d301      	bcc.n	80015aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00f      	b.n	80015ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015aa:	4a0a      	ldr	r2, [pc, #40]	@ (80015d4 <SysTick_Config+0x40>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b2:	210f      	movs	r1, #15
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	f7ff ff90 	bl	80014dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015bc:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <SysTick_Config+0x40>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c2:	4b04      	ldr	r3, [pc, #16]	@ (80015d4 <SysTick_Config+0x40>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	e000e010 	.word	0xe000e010

080015d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff2d 	bl	8001440 <__NVIC_SetPriorityGrouping>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001600:	f7ff ff42 	bl	8001488 <__NVIC_GetPriorityGrouping>
 8001604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	6978      	ldr	r0, [r7, #20]
 800160c:	f7ff ff90 	bl	8001530 <NVIC_EncodePriority>
 8001610:	4602      	mov	r2, r0
 8001612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff5f 	bl	80014dc <__NVIC_SetPriority>
}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff35 	bl	80014a4 <__NVIC_EnableIRQ>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ffa2 	bl	8001594 <SysTick_Config>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800165c:	b480      	push	{r7}
 800165e:	b087      	sub	sp, #28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001672:	e160      	b.n	8001936 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	2101      	movs	r1, #1
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	4013      	ands	r3, r2
 8001682:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 8152 	beq.w	8001930 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	2b01      	cmp	r3, #1
 8001696:	d005      	beq.n	80016a4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d130      	bne.n	8001706 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	2203      	movs	r2, #3
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80016da:	2201      	movs	r2, #1
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	091b      	lsrs	r3, r3, #4
 80016f0:	f003 0201 	and.w	r2, r3, #1
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	2b03      	cmp	r3, #3
 8001710:	d017      	beq.n	8001742 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	2203      	movs	r2, #3
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d123      	bne.n	8001796 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	08da      	lsrs	r2, r3, #3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3208      	adds	r2, #8
 8001756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	220f      	movs	r2, #15
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	691a      	ldr	r2, [r3, #16]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	08da      	lsrs	r2, r3, #3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3208      	adds	r2, #8
 8001790:	6939      	ldr	r1, [r7, #16]
 8001792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	2203      	movs	r2, #3
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 0203 	and.w	r2, r3, #3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 80ac 	beq.w	8001930 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001954 <HAL_GPIO_Init+0x2f8>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4a5d      	ldr	r2, [pc, #372]	@ (8001954 <HAL_GPIO_Init+0x2f8>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6213      	str	r3, [r2, #32]
 80017e4:	4b5b      	ldr	r3, [pc, #364]	@ (8001954 <HAL_GPIO_Init+0x2f8>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80017f0:	4a59      	ldr	r2, [pc, #356]	@ (8001958 <HAL_GPIO_Init+0x2fc>)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	3302      	adds	r3, #2
 80017f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	220f      	movs	r2, #15
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a51      	ldr	r2, [pc, #324]	@ (800195c <HAL_GPIO_Init+0x300>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d025      	beq.n	8001868 <HAL_GPIO_Init+0x20c>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a50      	ldr	r2, [pc, #320]	@ (8001960 <HAL_GPIO_Init+0x304>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d01f      	beq.n	8001864 <HAL_GPIO_Init+0x208>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a4f      	ldr	r2, [pc, #316]	@ (8001964 <HAL_GPIO_Init+0x308>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d019      	beq.n	8001860 <HAL_GPIO_Init+0x204>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a4e      	ldr	r2, [pc, #312]	@ (8001968 <HAL_GPIO_Init+0x30c>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d013      	beq.n	800185c <HAL_GPIO_Init+0x200>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a4d      	ldr	r2, [pc, #308]	@ (800196c <HAL_GPIO_Init+0x310>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d00d      	beq.n	8001858 <HAL_GPIO_Init+0x1fc>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a4c      	ldr	r2, [pc, #304]	@ (8001970 <HAL_GPIO_Init+0x314>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d007      	beq.n	8001854 <HAL_GPIO_Init+0x1f8>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a4b      	ldr	r2, [pc, #300]	@ (8001974 <HAL_GPIO_Init+0x318>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d101      	bne.n	8001850 <HAL_GPIO_Init+0x1f4>
 800184c:	2306      	movs	r3, #6
 800184e:	e00c      	b.n	800186a <HAL_GPIO_Init+0x20e>
 8001850:	2307      	movs	r3, #7
 8001852:	e00a      	b.n	800186a <HAL_GPIO_Init+0x20e>
 8001854:	2305      	movs	r3, #5
 8001856:	e008      	b.n	800186a <HAL_GPIO_Init+0x20e>
 8001858:	2304      	movs	r3, #4
 800185a:	e006      	b.n	800186a <HAL_GPIO_Init+0x20e>
 800185c:	2303      	movs	r3, #3
 800185e:	e004      	b.n	800186a <HAL_GPIO_Init+0x20e>
 8001860:	2302      	movs	r3, #2
 8001862:	e002      	b.n	800186a <HAL_GPIO_Init+0x20e>
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <HAL_GPIO_Init+0x20e>
 8001868:	2300      	movs	r3, #0
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	f002 0203 	and.w	r2, r2, #3
 8001870:	0092      	lsls	r2, r2, #2
 8001872:	4093      	lsls	r3, r2
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800187a:	4937      	ldr	r1, [pc, #220]	@ (8001958 <HAL_GPIO_Init+0x2fc>)
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	3302      	adds	r3, #2
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001888:	4b3b      	ldr	r3, [pc, #236]	@ (8001978 <HAL_GPIO_Init+0x31c>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	43db      	mvns	r3, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018ac:	4a32      	ldr	r2, [pc, #200]	@ (8001978 <HAL_GPIO_Init+0x31c>)
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018b2:	4b31      	ldr	r3, [pc, #196]	@ (8001978 <HAL_GPIO_Init+0x31c>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018d6:	4a28      	ldr	r2, [pc, #160]	@ (8001978 <HAL_GPIO_Init+0x31c>)
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018dc:	4b26      	ldr	r3, [pc, #152]	@ (8001978 <HAL_GPIO_Init+0x31c>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001900:	4a1d      	ldr	r2, [pc, #116]	@ (8001978 <HAL_GPIO_Init+0x31c>)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001906:	4b1c      	ldr	r3, [pc, #112]	@ (8001978 <HAL_GPIO_Init+0x31c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4313      	orrs	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800192a:	4a13      	ldr	r2, [pc, #76]	@ (8001978 <HAL_GPIO_Init+0x31c>)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	3301      	adds	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	fa22 f303 	lsr.w	r3, r2, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	f47f ae97 	bne.w	8001674 <HAL_GPIO_Init+0x18>
  }
}
 8001946:	bf00      	nop
 8001948:	bf00      	nop
 800194a:	371c      	adds	r7, #28
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	40010000 	.word	0x40010000
 800195c:	40020000 	.word	0x40020000
 8001960:	40020400 	.word	0x40020400
 8001964:	40020800 	.word	0x40020800
 8001968:	40020c00 	.word	0x40020c00
 800196c:	40021000 	.word	0x40021000
 8001970:	40021400 	.word	0x40021400
 8001974:	40021800 	.word	0x40021800
 8001978:	40010400 	.word	0x40010400

0800197c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691a      	ldr	r2, [r3, #16]
 800198c:	887b      	ldrh	r3, [r7, #2]
 800198e:	4013      	ands	r3, r2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d002      	beq.n	800199a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001994:	2301      	movs	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
 8001998:	e001      	b.n	800199e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800199e:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	460b      	mov	r3, r1
 80019b4:	807b      	strh	r3, [r7, #2]
 80019b6:	4613      	mov	r3, r2
 80019b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019ba:	787b      	ldrb	r3, [r7, #1]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019c0:	887a      	ldrh	r2, [r7, #2]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80019c6:	e003      	b.n	80019d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80019c8:	887b      	ldrh	r3, [r7, #2]
 80019ca:	041a      	lsls	r2, r3, #16
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	619a      	str	r2, [r3, #24]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
	...

080019dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019e6:	4b08      	ldr	r3, [pc, #32]	@ (8001a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e8:	695a      	ldr	r2, [r3, #20]
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d006      	beq.n	8001a00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019f2:	4a05      	ldr	r2, [pc, #20]	@ (8001a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 f806 	bl	8001a0c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40010400 	.word	0x40010400

08001a0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e31d      	b.n	800206e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a32:	4b94      	ldr	r3, [pc, #592]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 030c 	and.w	r3, r3, #12
 8001a3a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a3c:	4b91      	ldr	r3, [pc, #580]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a44:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d07b      	beq.n	8001b4a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d006      	beq.n	8001a66 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2b0c      	cmp	r3, #12
 8001a5c:	d10f      	bne.n	8001a7e <HAL_RCC_OscConfig+0x5e>
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a64:	d10b      	bne.n	8001a7e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a66:	4b87      	ldr	r3, [pc, #540]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d06a      	beq.n	8001b48 <HAL_RCC_OscConfig+0x128>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d166      	bne.n	8001b48 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e2f7      	b.n	800206e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d106      	bne.n	8001a94 <HAL_RCC_OscConfig+0x74>
 8001a86:	4b7f      	ldr	r3, [pc, #508]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a7e      	ldr	r2, [pc, #504]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e02d      	b.n	8001af0 <HAL_RCC_OscConfig+0xd0>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10c      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x96>
 8001a9c:	4b79      	ldr	r3, [pc, #484]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a78      	ldr	r2, [pc, #480]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001aa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	4b76      	ldr	r3, [pc, #472]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a75      	ldr	r2, [pc, #468]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001aae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	e01c      	b.n	8001af0 <HAL_RCC_OscConfig+0xd0>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b05      	cmp	r3, #5
 8001abc:	d10c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0xb8>
 8001abe:	4b71      	ldr	r3, [pc, #452]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a70      	ldr	r2, [pc, #448]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001ac4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b6e      	ldr	r3, [pc, #440]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a6d      	ldr	r2, [pc, #436]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	e00b      	b.n	8001af0 <HAL_RCC_OscConfig+0xd0>
 8001ad8:	4b6a      	ldr	r3, [pc, #424]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a69      	ldr	r2, [pc, #420]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001ade:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b67      	ldr	r3, [pc, #412]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a66      	ldr	r2, [pc, #408]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001aea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d013      	beq.n	8001b20 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7ff fc76 	bl	80013e8 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff fc72 	bl	80013e8 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	@ 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e2ad      	b.n	800206e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b12:	4b5c      	ldr	r3, [pc, #368]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0xe0>
 8001b1e:	e014      	b.n	8001b4a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff fc62 	bl	80013e8 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff fc5e 	bl	80013e8 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	@ 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e299      	b.n	800206e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b3a:	4b52      	ldr	r3, [pc, #328]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x108>
 8001b46:	e000      	b.n	8001b4a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d05a      	beq.n	8001c0c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2b0c      	cmp	r3, #12
 8001b60:	d119      	bne.n	8001b96 <HAL_RCC_OscConfig+0x176>
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d116      	bne.n	8001b96 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b68:	4b46      	ldr	r3, [pc, #280]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <HAL_RCC_OscConfig+0x160>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e276      	b.n	800206e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b80:	4b40      	ldr	r3, [pc, #256]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	021b      	lsls	r3, r3, #8
 8001b8e:	493d      	ldr	r1, [pc, #244]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b94:	e03a      	b.n	8001c0c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d020      	beq.n	8001be0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b9e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c88 <HAL_RCC_OscConfig+0x268>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fc20 	bl	80013e8 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bac:	f7ff fc1c 	bl	80013e8 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e257      	b.n	800206e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bbe:	4b31      	ldr	r3, [pc, #196]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bca:	4b2e      	ldr	r3, [pc, #184]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	492a      	ldr	r1, [pc, #168]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	604b      	str	r3, [r1, #4]
 8001bde:	e015      	b.n	8001c0c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001be0:	4b29      	ldr	r3, [pc, #164]	@ (8001c88 <HAL_RCC_OscConfig+0x268>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7ff fbff 	bl	80013e8 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bee:	f7ff fbfb 	bl	80013e8 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e236      	b.n	800206e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c00:	4b20      	ldr	r3, [pc, #128]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f0      	bne.n	8001bee <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0310 	and.w	r3, r3, #16
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80b8 	beq.w	8001d8a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d170      	bne.n	8001d02 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c20:	4b18      	ldr	r3, [pc, #96]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_OscConfig+0x218>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e21a      	b.n	800206e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1a      	ldr	r2, [r3, #32]
 8001c3c:	4b11      	ldr	r3, [pc, #68]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d921      	bls.n	8001c8c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 fc7d 	bl	800254c <RCC_SetFlashLatencyFromMSIRange>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e208      	b.n	800206e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c5c:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	4906      	ldr	r1, [pc, #24]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c6e:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	061b      	lsls	r3, r3, #24
 8001c7c:	4901      	ldr	r1, [pc, #4]	@ (8001c84 <HAL_RCC_OscConfig+0x264>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]
 8001c82:	e020      	b.n	8001cc6 <HAL_RCC_OscConfig+0x2a6>
 8001c84:	40023800 	.word	0x40023800
 8001c88:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c8c:	4b99      	ldr	r3, [pc, #612]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	4996      	ldr	r1, [pc, #600]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c9e:	4b95      	ldr	r3, [pc, #596]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	061b      	lsls	r3, r3, #24
 8001cac:	4991      	ldr	r1, [pc, #580]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 fc48 	bl	800254c <RCC_SetFlashLatencyFromMSIRange>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e1d3      	b.n	800206e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	0b5b      	lsrs	r3, r3, #13
 8001ccc:	3301      	adds	r3, #1
 8001cce:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001cd6:	4a87      	ldr	r2, [pc, #540]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001cd8:	6892      	ldr	r2, [r2, #8]
 8001cda:	0912      	lsrs	r2, r2, #4
 8001cdc:	f002 020f 	and.w	r2, r2, #15
 8001ce0:	4985      	ldr	r1, [pc, #532]	@ (8001ef8 <HAL_RCC_OscConfig+0x4d8>)
 8001ce2:	5c8a      	ldrb	r2, [r1, r2]
 8001ce4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001ce6:	4a85      	ldr	r2, [pc, #532]	@ (8001efc <HAL_RCC_OscConfig+0x4dc>)
 8001ce8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cea:	4b85      	ldr	r3, [pc, #532]	@ (8001f00 <HAL_RCC_OscConfig+0x4e0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fb2e 	bl	8001350 <HAL_InitTick>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d045      	beq.n	8001d8a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	e1b5      	b.n	800206e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d029      	beq.n	8001d5e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d0a:	4b7e      	ldr	r3, [pc, #504]	@ (8001f04 <HAL_RCC_OscConfig+0x4e4>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7ff fb6a 	bl	80013e8 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d18:	f7ff fb66 	bl	80013e8 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e1a1      	b.n	800206e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d2a:	4b72      	ldr	r3, [pc, #456]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d36:	4b6f      	ldr	r3, [pc, #444]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	496c      	ldr	r1, [pc, #432]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d48:	4b6a      	ldr	r3, [pc, #424]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	061b      	lsls	r3, r3, #24
 8001d56:	4967      	ldr	r1, [pc, #412]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
 8001d5c:	e015      	b.n	8001d8a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d5e:	4b69      	ldr	r3, [pc, #420]	@ (8001f04 <HAL_RCC_OscConfig+0x4e4>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff fb40 	bl	80013e8 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d6c:	f7ff fb3c 	bl	80013e8 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e177      	b.n	800206e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d7e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d030      	beq.n	8001df8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d016      	beq.n	8001dcc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d9e:	4b5a      	ldr	r3, [pc, #360]	@ (8001f08 <HAL_RCC_OscConfig+0x4e8>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da4:	f7ff fb20 	bl	80013e8 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dac:	f7ff fb1c 	bl	80013e8 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e157      	b.n	800206e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001dbe:	4b4d      	ldr	r3, [pc, #308]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0x38c>
 8001dca:	e015      	b.n	8001df8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dcc:	4b4e      	ldr	r3, [pc, #312]	@ (8001f08 <HAL_RCC_OscConfig+0x4e8>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd2:	f7ff fb09 	bl	80013e8 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dda:	f7ff fb05 	bl	80013e8 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e140      	b.n	800206e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dec:	4b41      	ldr	r3, [pc, #260]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f0      	bne.n	8001dda <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80b5 	beq.w	8001f70 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e06:	2300      	movs	r3, #0
 8001e08:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e0a:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10d      	bne.n	8001e32 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	4b37      	ldr	r3, [pc, #220]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1a:	4a36      	ldr	r2, [pc, #216]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e20:	6253      	str	r3, [r2, #36]	@ 0x24
 8001e22:	4b34      	ldr	r3, [pc, #208]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e32:	4b36      	ldr	r3, [pc, #216]	@ (8001f0c <HAL_RCC_OscConfig+0x4ec>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d118      	bne.n	8001e70 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e3e:	4b33      	ldr	r3, [pc, #204]	@ (8001f0c <HAL_RCC_OscConfig+0x4ec>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a32      	ldr	r2, [pc, #200]	@ (8001f0c <HAL_RCC_OscConfig+0x4ec>)
 8001e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff facd 	bl	80013e8 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e52:	f7ff fac9 	bl	80013e8 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b64      	cmp	r3, #100	@ 0x64
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e104      	b.n	800206e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e64:	4b29      	ldr	r3, [pc, #164]	@ (8001f0c <HAL_RCC_OscConfig+0x4ec>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d106      	bne.n	8001e86 <HAL_RCC_OscConfig+0x466>
 8001e78:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001e7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e82:	6353      	str	r3, [r2, #52]	@ 0x34
 8001e84:	e02d      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4c2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x488>
 8001e8e:	4b19      	ldr	r3, [pc, #100]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e92:	4a18      	ldr	r2, [pc, #96]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e98:	6353      	str	r3, [r2, #52]	@ 0x34
 8001e9a:	4b16      	ldr	r3, [pc, #88]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e9e:	4a15      	ldr	r2, [pc, #84]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001ea0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001ea4:	6353      	str	r3, [r2, #52]	@ 0x34
 8001ea6:	e01c      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4c2>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d10c      	bne.n	8001eca <HAL_RCC_OscConfig+0x4aa>
 8001eb0:	4b10      	ldr	r3, [pc, #64]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eb4:	4a0f      	ldr	r2, [pc, #60]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001eb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001eba:	6353      	str	r3, [r2, #52]	@ 0x34
 8001ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ec6:	6353      	str	r3, [r2, #52]	@ 0x34
 8001ec8:	e00b      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4c2>
 8001eca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ece:	4a09      	ldr	r2, [pc, #36]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ed4:	6353      	str	r3, [r2, #52]	@ 0x34
 8001ed6:	4b07      	ldr	r3, [pc, #28]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eda:	4a06      	ldr	r2, [pc, #24]	@ (8001ef4 <HAL_RCC_OscConfig+0x4d4>)
 8001edc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001ee0:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d024      	beq.n	8001f34 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eea:	f7ff fa7d 	bl	80013e8 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ef0:	e019      	b.n	8001f26 <HAL_RCC_OscConfig+0x506>
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	08003880 	.word	0x08003880
 8001efc:	20000000 	.word	0x20000000
 8001f00:	20000004 	.word	0x20000004
 8001f04:	42470020 	.word	0x42470020
 8001f08:	42470680 	.word	0x42470680
 8001f0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f10:	f7ff fa6a 	bl	80013e8 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e0a3      	b.n	800206e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f26:	4b54      	ldr	r3, [pc, #336]	@ (8002078 <HAL_RCC_OscConfig+0x658>)
 8001f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0ee      	beq.n	8001f10 <HAL_RCC_OscConfig+0x4f0>
 8001f32:	e014      	b.n	8001f5e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f34:	f7ff fa58 	bl	80013e8 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f3a:	e00a      	b.n	8001f52 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f3c:	f7ff fa54 	bl	80013e8 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e08d      	b.n	800206e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f52:	4b49      	ldr	r3, [pc, #292]	@ (8002078 <HAL_RCC_OscConfig+0x658>)
 8001f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1ee      	bne.n	8001f3c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f5e:	7ffb      	ldrb	r3, [r7, #31]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d105      	bne.n	8001f70 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f64:	4b44      	ldr	r3, [pc, #272]	@ (8002078 <HAL_RCC_OscConfig+0x658>)
 8001f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f68:	4a43      	ldr	r2, [pc, #268]	@ (8002078 <HAL_RCC_OscConfig+0x658>)
 8001f6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f6e:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d079      	beq.n	800206c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2b0c      	cmp	r3, #12
 8001f7c:	d056      	beq.n	800202c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d13b      	bne.n	8001ffe <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f86:	4b3d      	ldr	r3, [pc, #244]	@ (800207c <HAL_RCC_OscConfig+0x65c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7ff fa2c 	bl	80013e8 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f94:	f7ff fa28 	bl	80013e8 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e063      	b.n	800206e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fa6:	4b34      	ldr	r3, [pc, #208]	@ (8002078 <HAL_RCC_OscConfig+0x658>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb2:	4b31      	ldr	r3, [pc, #196]	@ (8002078 <HAL_RCC_OscConfig+0x658>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc2:	4319      	orrs	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	492b      	ldr	r1, [pc, #172]	@ (8002078 <HAL_RCC_OscConfig+0x658>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd0:	4b2a      	ldr	r3, [pc, #168]	@ (800207c <HAL_RCC_OscConfig+0x65c>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7ff fa07 	bl	80013e8 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fde:	f7ff fa03 	bl	80013e8 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e03e      	b.n	800206e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ff0:	4b21      	ldr	r3, [pc, #132]	@ (8002078 <HAL_RCC_OscConfig+0x658>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x5be>
 8001ffc:	e036      	b.n	800206c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800207c <HAL_RCC_OscConfig+0x65c>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7ff f9f0 	bl	80013e8 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800200c:	f7ff f9ec 	bl	80013e8 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e027      	b.n	800206e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800201e:	4b16      	ldr	r3, [pc, #88]	@ (8002078 <HAL_RCC_OscConfig+0x658>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x5ec>
 800202a:	e01f      	b.n	800206c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e01a      	b.n	800206e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002038:	4b0f      	ldr	r3, [pc, #60]	@ (8002078 <HAL_RCC_OscConfig+0x658>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002048:	429a      	cmp	r2, r3
 800204a:	d10d      	bne.n	8002068 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002056:	429a      	cmp	r2, r3
 8002058:	d106      	bne.n	8002068 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d001      	beq.n	800206c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3720      	adds	r7, #32
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800
 800207c:	42470060 	.word	0x42470060

08002080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e11a      	b.n	80022ca <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002094:	4b8f      	ldr	r3, [pc, #572]	@ (80022d4 <HAL_RCC_ClockConfig+0x254>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d919      	bls.n	80020d6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d105      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x34>
 80020a8:	4b8a      	ldr	r3, [pc, #552]	@ (80022d4 <HAL_RCC_ClockConfig+0x254>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a89      	ldr	r2, [pc, #548]	@ (80022d4 <HAL_RCC_ClockConfig+0x254>)
 80020ae:	f043 0304 	orr.w	r3, r3, #4
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	4b87      	ldr	r3, [pc, #540]	@ (80022d4 <HAL_RCC_ClockConfig+0x254>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f023 0201 	bic.w	r2, r3, #1
 80020bc:	4985      	ldr	r1, [pc, #532]	@ (80022d4 <HAL_RCC_ClockConfig+0x254>)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c4:	4b83      	ldr	r3, [pc, #524]	@ (80022d4 <HAL_RCC_ClockConfig+0x254>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d001      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0f9      	b.n	80022ca <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d008      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e2:	4b7d      	ldr	r3, [pc, #500]	@ (80022d8 <HAL_RCC_ClockConfig+0x258>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	497a      	ldr	r1, [pc, #488]	@ (80022d8 <HAL_RCC_ClockConfig+0x258>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 808e 	beq.w	800221e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d107      	bne.n	800211a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800210a:	4b73      	ldr	r3, [pc, #460]	@ (80022d8 <HAL_RCC_ClockConfig+0x258>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d121      	bne.n	800215a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e0d7      	b.n	80022ca <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d107      	bne.n	8002132 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002122:	4b6d      	ldr	r3, [pc, #436]	@ (80022d8 <HAL_RCC_ClockConfig+0x258>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d115      	bne.n	800215a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e0cb      	b.n	80022ca <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d107      	bne.n	800214a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800213a:	4b67      	ldr	r3, [pc, #412]	@ (80022d8 <HAL_RCC_ClockConfig+0x258>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d109      	bne.n	800215a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e0bf      	b.n	80022ca <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800214a:	4b63      	ldr	r3, [pc, #396]	@ (80022d8 <HAL_RCC_ClockConfig+0x258>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e0b7      	b.n	80022ca <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800215a:	4b5f      	ldr	r3, [pc, #380]	@ (80022d8 <HAL_RCC_ClockConfig+0x258>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f023 0203 	bic.w	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	495c      	ldr	r1, [pc, #368]	@ (80022d8 <HAL_RCC_ClockConfig+0x258>)
 8002168:	4313      	orrs	r3, r2
 800216a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800216c:	f7ff f93c 	bl	80013e8 <HAL_GetTick>
 8002170:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d112      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800217a:	e00a      	b.n	8002192 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800217c:	f7ff f934 	bl	80013e8 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800218a:	4293      	cmp	r3, r2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e09b      	b.n	80022ca <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002192:	4b51      	ldr	r3, [pc, #324]	@ (80022d8 <HAL_RCC_ClockConfig+0x258>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b08      	cmp	r3, #8
 800219c:	d1ee      	bne.n	800217c <HAL_RCC_ClockConfig+0xfc>
 800219e:	e03e      	b.n	800221e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d112      	bne.n	80021ce <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a8:	e00a      	b.n	80021c0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021aa:	f7ff f91d 	bl	80013e8 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e084      	b.n	80022ca <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c0:	4b45      	ldr	r3, [pc, #276]	@ (80022d8 <HAL_RCC_ClockConfig+0x258>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b0c      	cmp	r3, #12
 80021ca:	d1ee      	bne.n	80021aa <HAL_RCC_ClockConfig+0x12a>
 80021cc:	e027      	b.n	800221e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d11d      	bne.n	8002212 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d8:	f7ff f906 	bl	80013e8 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e06d      	b.n	80022ca <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ee:	4b3a      	ldr	r3, [pc, #232]	@ (80022d8 <HAL_RCC_ClockConfig+0x258>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d1ee      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x158>
 80021fa:	e010      	b.n	800221e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021fc:	f7ff f8f4 	bl	80013e8 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e05b      	b.n	80022ca <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002212:	4b31      	ldr	r3, [pc, #196]	@ (80022d8 <HAL_RCC_ClockConfig+0x258>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1ee      	bne.n	80021fc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800221e:	4b2d      	ldr	r3, [pc, #180]	@ (80022d4 <HAL_RCC_ClockConfig+0x254>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d219      	bcs.n	8002260 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d105      	bne.n	800223e <HAL_RCC_ClockConfig+0x1be>
 8002232:	4b28      	ldr	r3, [pc, #160]	@ (80022d4 <HAL_RCC_ClockConfig+0x254>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a27      	ldr	r2, [pc, #156]	@ (80022d4 <HAL_RCC_ClockConfig+0x254>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b25      	ldr	r3, [pc, #148]	@ (80022d4 <HAL_RCC_ClockConfig+0x254>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 0201 	bic.w	r2, r3, #1
 8002246:	4923      	ldr	r1, [pc, #140]	@ (80022d4 <HAL_RCC_ClockConfig+0x254>)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800224e:	4b21      	ldr	r3, [pc, #132]	@ (80022d4 <HAL_RCC_ClockConfig+0x254>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e034      	b.n	80022ca <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800226c:	4b1a      	ldr	r3, [pc, #104]	@ (80022d8 <HAL_RCC_ClockConfig+0x258>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4917      	ldr	r1, [pc, #92]	@ (80022d8 <HAL_RCC_ClockConfig+0x258>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800228a:	4b13      	ldr	r3, [pc, #76]	@ (80022d8 <HAL_RCC_ClockConfig+0x258>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	490f      	ldr	r1, [pc, #60]	@ (80022d8 <HAL_RCC_ClockConfig+0x258>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800229e:	f000 f823 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 80022a2:	4602      	mov	r2, r0
 80022a4:	4b0c      	ldr	r3, [pc, #48]	@ (80022d8 <HAL_RCC_ClockConfig+0x258>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	490b      	ldr	r1, [pc, #44]	@ (80022dc <HAL_RCC_ClockConfig+0x25c>)
 80022b0:	5ccb      	ldrb	r3, [r1, r3]
 80022b2:	fa22 f303 	lsr.w	r3, r2, r3
 80022b6:	4a0a      	ldr	r2, [pc, #40]	@ (80022e0 <HAL_RCC_ClockConfig+0x260>)
 80022b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022ba:	4b0a      	ldr	r3, [pc, #40]	@ (80022e4 <HAL_RCC_ClockConfig+0x264>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff f846 	bl	8001350 <HAL_InitTick>
 80022c4:	4603      	mov	r3, r0
 80022c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80022c8:	7afb      	ldrb	r3, [r7, #11]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40023c00 	.word	0x40023c00
 80022d8:	40023800 	.word	0x40023800
 80022dc:	08003880 	.word	0x08003880
 80022e0:	20000000 	.word	0x20000000
 80022e4:	20000004 	.word	0x20000004

080022e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022ec:	b092      	sub	sp, #72	@ 0x48
 80022ee:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80022f0:	4b79      	ldr	r3, [pc, #484]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022f8:	f003 030c 	and.w	r3, r3, #12
 80022fc:	2b0c      	cmp	r3, #12
 80022fe:	d00d      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x34>
 8002300:	2b0c      	cmp	r3, #12
 8002302:	f200 80d5 	bhi.w	80024b0 <HAL_RCC_GetSysClockFreq+0x1c8>
 8002306:	2b04      	cmp	r3, #4
 8002308:	d002      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0x28>
 800230a:	2b08      	cmp	r3, #8
 800230c:	d003      	beq.n	8002316 <HAL_RCC_GetSysClockFreq+0x2e>
 800230e:	e0cf      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002310:	4b72      	ldr	r3, [pc, #456]	@ (80024dc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002312:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002314:	e0da      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002316:	4b72      	ldr	r3, [pc, #456]	@ (80024e0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002318:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800231a:	e0d7      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800231c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800231e:	0c9b      	lsrs	r3, r3, #18
 8002320:	f003 020f 	and.w	r2, r3, #15
 8002324:	4b6f      	ldr	r3, [pc, #444]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002326:	5c9b      	ldrb	r3, [r3, r2]
 8002328:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800232a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800232c:	0d9b      	lsrs	r3, r3, #22
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	3301      	adds	r3, #1
 8002334:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002336:	4b68      	ldr	r3, [pc, #416]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d05d      	beq.n	80023fe <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002344:	2200      	movs	r2, #0
 8002346:	4618      	mov	r0, r3
 8002348:	4611      	mov	r1, r2
 800234a:	4604      	mov	r4, r0
 800234c:	460d      	mov	r5, r1
 800234e:	4622      	mov	r2, r4
 8002350:	462b      	mov	r3, r5
 8002352:	f04f 0000 	mov.w	r0, #0
 8002356:	f04f 0100 	mov.w	r1, #0
 800235a:	0159      	lsls	r1, r3, #5
 800235c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002360:	0150      	lsls	r0, r2, #5
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4621      	mov	r1, r4
 8002368:	1a51      	subs	r1, r2, r1
 800236a:	6139      	str	r1, [r7, #16]
 800236c:	4629      	mov	r1, r5
 800236e:	eb63 0301 	sbc.w	r3, r3, r1
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002380:	4659      	mov	r1, fp
 8002382:	018b      	lsls	r3, r1, #6
 8002384:	4651      	mov	r1, sl
 8002386:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800238a:	4651      	mov	r1, sl
 800238c:	018a      	lsls	r2, r1, #6
 800238e:	46d4      	mov	ip, sl
 8002390:	ebb2 080c 	subs.w	r8, r2, ip
 8002394:	4659      	mov	r1, fp
 8002396:	eb63 0901 	sbc.w	r9, r3, r1
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023ae:	4690      	mov	r8, r2
 80023b0:	4699      	mov	r9, r3
 80023b2:	4623      	mov	r3, r4
 80023b4:	eb18 0303 	adds.w	r3, r8, r3
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	462b      	mov	r3, r5
 80023bc:	eb49 0303 	adc.w	r3, r9, r3
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023ce:	4629      	mov	r1, r5
 80023d0:	024b      	lsls	r3, r1, #9
 80023d2:	4620      	mov	r0, r4
 80023d4:	4629      	mov	r1, r5
 80023d6:	4604      	mov	r4, r0
 80023d8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80023dc:	4601      	mov	r1, r0
 80023de:	024a      	lsls	r2, r1, #9
 80023e0:	4610      	mov	r0, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023e6:	2200      	movs	r2, #0
 80023e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80023f0:	f7fd fec4 	bl	800017c <__aeabi_uldivmod>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4613      	mov	r3, r2
 80023fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80023fc:	e055      	b.n	80024aa <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80023fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002400:	2200      	movs	r2, #0
 8002402:	623b      	str	r3, [r7, #32]
 8002404:	627a      	str	r2, [r7, #36]	@ 0x24
 8002406:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800240a:	4642      	mov	r2, r8
 800240c:	464b      	mov	r3, r9
 800240e:	f04f 0000 	mov.w	r0, #0
 8002412:	f04f 0100 	mov.w	r1, #0
 8002416:	0159      	lsls	r1, r3, #5
 8002418:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800241c:	0150      	lsls	r0, r2, #5
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	46c4      	mov	ip, r8
 8002424:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002428:	4640      	mov	r0, r8
 800242a:	4649      	mov	r1, r9
 800242c:	468c      	mov	ip, r1
 800242e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800243e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002442:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002446:	ebb2 040a 	subs.w	r4, r2, sl
 800244a:	eb63 050b 	sbc.w	r5, r3, fp
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	00eb      	lsls	r3, r5, #3
 8002458:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800245c:	00e2      	lsls	r2, r4, #3
 800245e:	4614      	mov	r4, r2
 8002460:	461d      	mov	r5, r3
 8002462:	4603      	mov	r3, r0
 8002464:	18e3      	adds	r3, r4, r3
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	460b      	mov	r3, r1
 800246a:	eb45 0303 	adc.w	r3, r5, r3
 800246e:	607b      	str	r3, [r7, #4]
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	e9d7 4500 	ldrd	r4, r5, [r7]
 800247c:	4629      	mov	r1, r5
 800247e:	028b      	lsls	r3, r1, #10
 8002480:	4620      	mov	r0, r4
 8002482:	4629      	mov	r1, r5
 8002484:	4604      	mov	r4, r0
 8002486:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800248a:	4601      	mov	r1, r0
 800248c:	028a      	lsls	r2, r1, #10
 800248e:	4610      	mov	r0, r2
 8002490:	4619      	mov	r1, r3
 8002492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002494:	2200      	movs	r2, #0
 8002496:	61bb      	str	r3, [r7, #24]
 8002498:	61fa      	str	r2, [r7, #28]
 800249a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800249e:	f7fd fe6d 	bl	800017c <__aeabi_uldivmod>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4613      	mov	r3, r2
 80024a8:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 80024aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024ac:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80024ae:	e00d      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80024b0:	4b09      	ldr	r3, [pc, #36]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	0b5b      	lsrs	r3, r3, #13
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80024bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024be:	3301      	adds	r3, #1
 80024c0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80024ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3748      	adds	r7, #72	@ 0x48
 80024d2:	46bd      	mov	sp, r7
 80024d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024d8:	40023800 	.word	0x40023800
 80024dc:	00f42400 	.word	0x00f42400
 80024e0:	007a1200 	.word	0x007a1200
 80024e4:	08003874 	.word	0x08003874

080024e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024ec:	4b02      	ldr	r3, [pc, #8]	@ (80024f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80024ee:	681b      	ldr	r3, [r3, #0]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr
 80024f8:	20000000 	.word	0x20000000

080024fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002500:	f7ff fff2 	bl	80024e8 <HAL_RCC_GetHCLKFreq>
 8002504:	4602      	mov	r2, r0
 8002506:	4b05      	ldr	r3, [pc, #20]	@ (800251c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	4903      	ldr	r1, [pc, #12]	@ (8002520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002512:	5ccb      	ldrb	r3, [r1, r3]
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40023800 	.word	0x40023800
 8002520:	08003890 	.word	0x08003890

08002524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002528:	f7ff ffde 	bl	80024e8 <HAL_RCC_GetHCLKFreq>
 800252c:	4602      	mov	r2, r0
 800252e:	4b05      	ldr	r3, [pc, #20]	@ (8002544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	0adb      	lsrs	r3, r3, #11
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	4903      	ldr	r1, [pc, #12]	@ (8002548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800253a:	5ccb      	ldrb	r3, [r1, r3]
 800253c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002540:	4618      	mov	r0, r3
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40023800 	.word	0x40023800
 8002548:	08003890 	.word	0x08003890

0800254c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002554:	2300      	movs	r3, #0
 8002556:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002558:	4b29      	ldr	r3, [pc, #164]	@ (8002600 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d12c      	bne.n	80025be <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002564:	4b26      	ldr	r3, [pc, #152]	@ (8002600 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002570:	4b24      	ldr	r3, [pc, #144]	@ (8002604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	e016      	b.n	80025aa <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257c:	4b20      	ldr	r3, [pc, #128]	@ (8002600 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	4a1f      	ldr	r2, [pc, #124]	@ (8002600 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002586:	6253      	str	r3, [r2, #36]	@ 0x24
 8002588:	4b1d      	ldr	r3, [pc, #116]	@ (8002600 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800258a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002594:	4b1b      	ldr	r3, [pc, #108]	@ (8002604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800259c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800259e:	4b18      	ldr	r3, [pc, #96]	@ (8002600 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80025a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a2:	4a17      	ldr	r2, [pc, #92]	@ (8002600 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80025a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025a8:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80025b0:	d105      	bne.n	80025be <RCC_SetFlashLatencyFromMSIRange+0x72>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80025b8:	d101      	bne.n	80025be <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80025ba:	2301      	movs	r3, #1
 80025bc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d105      	bne.n	80025d0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80025c4:	4b10      	ldr	r3, [pc, #64]	@ (8002608 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002608 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025ca:	f043 0304 	orr.w	r3, r3, #4
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002608 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 0201 	bic.w	r2, r3, #1
 80025d8:	490b      	ldr	r1, [pc, #44]	@ (8002608 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025e0:	4b09      	ldr	r3, [pc, #36]	@ (8002608 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d001      	beq.n	80025f2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	371c      	adds	r7, #28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40023800 	.word	0x40023800
 8002604:	40007000 	.word	0x40007000
 8002608:	40023c00 	.word	0x40023c00

0800260c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e031      	b.n	8002682 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7fe fd0c 	bl	8001050 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3304      	adds	r3, #4
 8002648:	4619      	mov	r1, r3
 800264a:	4610      	mov	r0, r2
 800264c:	f000 f930 	bl	80028b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b01      	cmp	r3, #1
 800269e:	d001      	beq.n	80026a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e032      	b.n	800270a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026b4:	d00e      	beq.n	80026d4 <HAL_TIM_Base_Start+0x48>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a16      	ldr	r2, [pc, #88]	@ (8002714 <HAL_TIM_Base_Start+0x88>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d009      	beq.n	80026d4 <HAL_TIM_Base_Start+0x48>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a14      	ldr	r2, [pc, #80]	@ (8002718 <HAL_TIM_Base_Start+0x8c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d004      	beq.n	80026d4 <HAL_TIM_Base_Start+0x48>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a13      	ldr	r2, [pc, #76]	@ (800271c <HAL_TIM_Base_Start+0x90>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d111      	bne.n	80026f8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b06      	cmp	r3, #6
 80026e4:	d010      	beq.n	8002708 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f042 0201 	orr.w	r2, r2, #1
 80026f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f6:	e007      	b.n	8002708 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	40000400 	.word	0x40000400
 8002718:	40000800 	.word	0x40000800
 800271c:	40010800 	.word	0x40010800

08002720 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_TIM_ConfigClockSource+0x1c>
 8002738:	2302      	movs	r3, #2
 800273a:	e0b4      	b.n	80028a6 <HAL_TIM_ConfigClockSource+0x186>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2202      	movs	r2, #2
 8002748:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800275a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002762:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002774:	d03e      	beq.n	80027f4 <HAL_TIM_ConfigClockSource+0xd4>
 8002776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800277a:	f200 8087 	bhi.w	800288c <HAL_TIM_ConfigClockSource+0x16c>
 800277e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002782:	f000 8086 	beq.w	8002892 <HAL_TIM_ConfigClockSource+0x172>
 8002786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800278a:	d87f      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 800278c:	2b70      	cmp	r3, #112	@ 0x70
 800278e:	d01a      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0xa6>
 8002790:	2b70      	cmp	r3, #112	@ 0x70
 8002792:	d87b      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 8002794:	2b60      	cmp	r3, #96	@ 0x60
 8002796:	d050      	beq.n	800283a <HAL_TIM_ConfigClockSource+0x11a>
 8002798:	2b60      	cmp	r3, #96	@ 0x60
 800279a:	d877      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 800279c:	2b50      	cmp	r3, #80	@ 0x50
 800279e:	d03c      	beq.n	800281a <HAL_TIM_ConfigClockSource+0xfa>
 80027a0:	2b50      	cmp	r3, #80	@ 0x50
 80027a2:	d873      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 80027a4:	2b40      	cmp	r3, #64	@ 0x40
 80027a6:	d058      	beq.n	800285a <HAL_TIM_ConfigClockSource+0x13a>
 80027a8:	2b40      	cmp	r3, #64	@ 0x40
 80027aa:	d86f      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 80027ac:	2b30      	cmp	r3, #48	@ 0x30
 80027ae:	d064      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x15a>
 80027b0:	2b30      	cmp	r3, #48	@ 0x30
 80027b2:	d86b      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d060      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x15a>
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	d867      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d05c      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x15a>
 80027c0:	2b10      	cmp	r3, #16
 80027c2:	d05a      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x15a>
 80027c4:	e062      	b.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027d6:	f000 f958 	bl	8002a8a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80027e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	609a      	str	r2, [r3, #8]
      break;
 80027f2:	e04f      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002804:	f000 f941 	bl	8002a8a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002816:	609a      	str	r2, [r3, #8]
      break;
 8002818:	e03c      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002826:	461a      	mov	r2, r3
 8002828:	f000 f8b8 	bl	800299c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2150      	movs	r1, #80	@ 0x50
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f90f 	bl	8002a56 <TIM_ITRx_SetConfig>
      break;
 8002838:	e02c      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002846:	461a      	mov	r2, r3
 8002848:	f000 f8d6 	bl	80029f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2160      	movs	r1, #96	@ 0x60
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f8ff 	bl	8002a56 <TIM_ITRx_SetConfig>
      break;
 8002858:	e01c      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002866:	461a      	mov	r2, r3
 8002868:	f000 f898 	bl	800299c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2140      	movs	r1, #64	@ 0x40
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f8ef 	bl	8002a56 <TIM_ITRx_SetConfig>
      break;
 8002878:	e00c      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4619      	mov	r1, r3
 8002884:	4610      	mov	r0, r2
 8002886:	f000 f8e6 	bl	8002a56 <TIM_ITRx_SetConfig>
      break;
 800288a:	e003      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
      break;
 8002890:	e000      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002892:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028c6:	d00f      	beq.n	80028e8 <TIM_Base_SetConfig+0x38>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a2e      	ldr	r2, [pc, #184]	@ (8002984 <TIM_Base_SetConfig+0xd4>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d00b      	beq.n	80028e8 <TIM_Base_SetConfig+0x38>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002988 <TIM_Base_SetConfig+0xd8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d007      	beq.n	80028e8 <TIM_Base_SetConfig+0x38>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a2c      	ldr	r2, [pc, #176]	@ (800298c <TIM_Base_SetConfig+0xdc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d003      	beq.n	80028e8 <TIM_Base_SetConfig+0x38>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002990 <TIM_Base_SetConfig+0xe0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d108      	bne.n	80028fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002900:	d017      	beq.n	8002932 <TIM_Base_SetConfig+0x82>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a1f      	ldr	r2, [pc, #124]	@ (8002984 <TIM_Base_SetConfig+0xd4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d013      	beq.n	8002932 <TIM_Base_SetConfig+0x82>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a1e      	ldr	r2, [pc, #120]	@ (8002988 <TIM_Base_SetConfig+0xd8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00f      	beq.n	8002932 <TIM_Base_SetConfig+0x82>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a1d      	ldr	r2, [pc, #116]	@ (800298c <TIM_Base_SetConfig+0xdc>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d00b      	beq.n	8002932 <TIM_Base_SetConfig+0x82>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a1c      	ldr	r2, [pc, #112]	@ (8002990 <TIM_Base_SetConfig+0xe0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d007      	beq.n	8002932 <TIM_Base_SetConfig+0x82>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a1b      	ldr	r2, [pc, #108]	@ (8002994 <TIM_Base_SetConfig+0xe4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d003      	beq.n	8002932 <TIM_Base_SetConfig+0x82>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a1a      	ldr	r2, [pc, #104]	@ (8002998 <TIM_Base_SetConfig+0xe8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d108      	bne.n	8002944 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4313      	orrs	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f043 0204 	orr.w	r2, r3, #4
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	601a      	str	r2, [r3, #0]
}
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	40000400 	.word	0x40000400
 8002988:	40000800 	.word	0x40000800
 800298c:	40000c00 	.word	0x40000c00
 8002990:	40010800 	.word	0x40010800
 8002994:	40010c00 	.word	0x40010c00
 8002998:	40011000 	.word	0x40011000

0800299c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	f023 0201 	bic.w	r2, r3, #1
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f023 030a 	bic.w	r3, r3, #10
 80029d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	4313      	orrs	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	621a      	str	r2, [r3, #32]
}
 80029ee:	bf00      	nop
 80029f0:	371c      	adds	r7, #28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	f023 0210 	bic.w	r2, r3, #16
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	031b      	lsls	r3, r3, #12
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a34:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	621a      	str	r2, [r3, #32]
}
 8002a4c:	bf00      	nop
 8002a4e:	371c      	adds	r7, #28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr

08002a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b085      	sub	sp, #20
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f043 0307 	orr.w	r3, r3, #7
 8002a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	609a      	str	r2, [r3, #8]
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr

08002a8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b087      	sub	sp, #28
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002aa4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	021a      	lsls	r2, r3, #8
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	431a      	orrs	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	609a      	str	r2, [r3, #8]
}
 8002abe:	bf00      	nop
 8002ac0:	371c      	adds	r7, #28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e046      	b.n	8002b6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b22:	d00e      	beq.n	8002b42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a13      	ldr	r2, [pc, #76]	@ (8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d009      	beq.n	8002b42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a12      	ldr	r2, [pc, #72]	@ (8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d004      	beq.n	8002b42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a10      	ldr	r2, [pc, #64]	@ (8002b80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d10c      	bne.n	8002b5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr
 8002b78:	40000400 	.word	0x40000400
 8002b7c:	40000800 	.word	0x40000800
 8002b80:	40010800 	.word	0x40010800

08002b84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e042      	b.n	8002c1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d106      	bne.n	8002bb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7fe fa80 	bl	80010b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2224      	movs	r2, #36	@ 0x24
 8002bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f82b 	bl	8002c24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695a      	ldr	r2, [r3, #20]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002c64:	f023 030c 	bic.w	r3, r3, #12
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	430b      	orrs	r3, r1
 8002c70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699a      	ldr	r2, [r3, #24]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a55      	ldr	r2, [pc, #340]	@ (8002de4 <UART_SetConfig+0x1c0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d103      	bne.n	8002c9a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c92:	f7ff fc47 	bl	8002524 <HAL_RCC_GetPCLK2Freq>
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	e002      	b.n	8002ca0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c9a:	f7ff fc2f 	bl	80024fc <HAL_RCC_GetPCLK1Freq>
 8002c9e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ca8:	d14c      	bne.n	8002d44 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009a      	lsls	r2, r3, #2
 8002cb4:	441a      	add	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc0:	4a49      	ldr	r2, [pc, #292]	@ (8002de8 <UART_SetConfig+0x1c4>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	0119      	lsls	r1, r3, #4
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009a      	lsls	r2, r3, #2
 8002cd4:	441a      	add	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ce0:	4b41      	ldr	r3, [pc, #260]	@ (8002de8 <UART_SetConfig+0x1c4>)
 8002ce2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	2064      	movs	r0, #100	@ 0x64
 8002cea:	fb00 f303 	mul.w	r3, r0, r3
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	3332      	adds	r3, #50	@ 0x32
 8002cf4:	4a3c      	ldr	r2, [pc, #240]	@ (8002de8 <UART_SetConfig+0x1c4>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002d02:	4419      	add	r1, r3
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009a      	lsls	r2, r3, #2
 8002d0e:	441a      	add	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d1a:	4b33      	ldr	r3, [pc, #204]	@ (8002de8 <UART_SetConfig+0x1c4>)
 8002d1c:	fba3 0302 	umull	r0, r3, r3, r2
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	2064      	movs	r0, #100	@ 0x64
 8002d24:	fb00 f303 	mul.w	r3, r0, r3
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	3332      	adds	r3, #50	@ 0x32
 8002d2e:	4a2e      	ldr	r2, [pc, #184]	@ (8002de8 <UART_SetConfig+0x1c4>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	095b      	lsrs	r3, r3, #5
 8002d36:	f003 0207 	and.w	r2, r3, #7
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	440a      	add	r2, r1
 8002d40:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d42:	e04a      	b.n	8002dda <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009a      	lsls	r2, r3, #2
 8002d4e:	441a      	add	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5a:	4a23      	ldr	r2, [pc, #140]	@ (8002de8 <UART_SetConfig+0x1c4>)
 8002d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d60:	095b      	lsrs	r3, r3, #5
 8002d62:	0119      	lsls	r1, r3, #4
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009a      	lsls	r2, r3, #2
 8002d6e:	441a      	add	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002de8 <UART_SetConfig+0x1c4>)
 8002d7c:	fba3 0302 	umull	r0, r3, r3, r2
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	2064      	movs	r0, #100	@ 0x64
 8002d84:	fb00 f303 	mul.w	r3, r0, r3
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	3332      	adds	r3, #50	@ 0x32
 8002d8e:	4a16      	ldr	r2, [pc, #88]	@ (8002de8 <UART_SetConfig+0x1c4>)
 8002d90:	fba2 2303 	umull	r2, r3, r2, r3
 8002d94:	095b      	lsrs	r3, r3, #5
 8002d96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d9a:	4419      	add	r1, r3
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	009a      	lsls	r2, r3, #2
 8002da6:	441a      	add	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	fbb2 f2f3 	udiv	r2, r2, r3
 8002db2:	4b0d      	ldr	r3, [pc, #52]	@ (8002de8 <UART_SetConfig+0x1c4>)
 8002db4:	fba3 0302 	umull	r0, r3, r3, r2
 8002db8:	095b      	lsrs	r3, r3, #5
 8002dba:	2064      	movs	r0, #100	@ 0x64
 8002dbc:	fb00 f303 	mul.w	r3, r0, r3
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	3332      	adds	r3, #50	@ 0x32
 8002dc6:	4a08      	ldr	r2, [pc, #32]	@ (8002de8 <UART_SetConfig+0x1c4>)
 8002dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dcc:	095b      	lsrs	r3, r3, #5
 8002dce:	f003 020f 	and.w	r2, r3, #15
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	440a      	add	r2, r1
 8002dd8:	609a      	str	r2, [r3, #8]
}
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40013800 	.word	0x40013800
 8002de8:	51eb851f 	.word	0x51eb851f

08002dec <sniprintf>:
 8002dec:	b40c      	push	{r2, r3}
 8002dee:	b530      	push	{r4, r5, lr}
 8002df0:	4b18      	ldr	r3, [pc, #96]	@ (8002e54 <sniprintf+0x68>)
 8002df2:	1e0c      	subs	r4, r1, #0
 8002df4:	681d      	ldr	r5, [r3, #0]
 8002df6:	b09d      	sub	sp, #116	@ 0x74
 8002df8:	da08      	bge.n	8002e0c <sniprintf+0x20>
 8002dfa:	238b      	movs	r3, #139	@ 0x8b
 8002dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002e00:	602b      	str	r3, [r5, #0]
 8002e02:	b01d      	add	sp, #116	@ 0x74
 8002e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e08:	b002      	add	sp, #8
 8002e0a:	4770      	bx	lr
 8002e0c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002e10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	931b      	str	r3, [sp, #108]	@ 0x6c
 8002e1a:	bf0c      	ite	eq
 8002e1c:	4623      	moveq	r3, r4
 8002e1e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002e22:	9304      	str	r3, [sp, #16]
 8002e24:	9307      	str	r3, [sp, #28]
 8002e26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e2a:	9002      	str	r0, [sp, #8]
 8002e2c:	9006      	str	r0, [sp, #24]
 8002e2e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002e32:	4628      	mov	r0, r5
 8002e34:	ab21      	add	r3, sp, #132	@ 0x84
 8002e36:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002e38:	a902      	add	r1, sp, #8
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	f000 f992 	bl	8003164 <_svfiprintf_r>
 8002e40:	1c43      	adds	r3, r0, #1
 8002e42:	bfbc      	itt	lt
 8002e44:	238b      	movlt	r3, #139	@ 0x8b
 8002e46:	602b      	strlt	r3, [r5, #0]
 8002e48:	2c00      	cmp	r4, #0
 8002e4a:	d0da      	beq.n	8002e02 <sniprintf+0x16>
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	9b02      	ldr	r3, [sp, #8]
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	e7d6      	b.n	8002e02 <sniprintf+0x16>
 8002e54:	2000000c 	.word	0x2000000c

08002e58 <memset>:
 8002e58:	4603      	mov	r3, r0
 8002e5a:	4402      	add	r2, r0
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d100      	bne.n	8002e62 <memset+0xa>
 8002e60:	4770      	bx	lr
 8002e62:	f803 1b01 	strb.w	r1, [r3], #1
 8002e66:	e7f9      	b.n	8002e5c <memset+0x4>

08002e68 <__errno>:
 8002e68:	4b01      	ldr	r3, [pc, #4]	@ (8002e70 <__errno+0x8>)
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	2000000c 	.word	0x2000000c

08002e74 <__libc_init_array>:
 8002e74:	b570      	push	{r4, r5, r6, lr}
 8002e76:	2600      	movs	r6, #0
 8002e78:	4d0c      	ldr	r5, [pc, #48]	@ (8002eac <__libc_init_array+0x38>)
 8002e7a:	4c0d      	ldr	r4, [pc, #52]	@ (8002eb0 <__libc_init_array+0x3c>)
 8002e7c:	1b64      	subs	r4, r4, r5
 8002e7e:	10a4      	asrs	r4, r4, #2
 8002e80:	42a6      	cmp	r6, r4
 8002e82:	d109      	bne.n	8002e98 <__libc_init_array+0x24>
 8002e84:	f000 fc76 	bl	8003774 <_init>
 8002e88:	2600      	movs	r6, #0
 8002e8a:	4d0a      	ldr	r5, [pc, #40]	@ (8002eb4 <__libc_init_array+0x40>)
 8002e8c:	4c0a      	ldr	r4, [pc, #40]	@ (8002eb8 <__libc_init_array+0x44>)
 8002e8e:	1b64      	subs	r4, r4, r5
 8002e90:	10a4      	asrs	r4, r4, #2
 8002e92:	42a6      	cmp	r6, r4
 8002e94:	d105      	bne.n	8002ea2 <__libc_init_array+0x2e>
 8002e96:	bd70      	pop	{r4, r5, r6, pc}
 8002e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e9c:	4798      	blx	r3
 8002e9e:	3601      	adds	r6, #1
 8002ea0:	e7ee      	b.n	8002e80 <__libc_init_array+0xc>
 8002ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ea6:	4798      	blx	r3
 8002ea8:	3601      	adds	r6, #1
 8002eaa:	e7f2      	b.n	8002e92 <__libc_init_array+0x1e>
 8002eac:	080038d4 	.word	0x080038d4
 8002eb0:	080038d4 	.word	0x080038d4
 8002eb4:	080038d4 	.word	0x080038d4
 8002eb8:	080038d8 	.word	0x080038d8

08002ebc <__retarget_lock_acquire_recursive>:
 8002ebc:	4770      	bx	lr

08002ebe <__retarget_lock_release_recursive>:
 8002ebe:	4770      	bx	lr

08002ec0 <_free_r>:
 8002ec0:	b538      	push	{r3, r4, r5, lr}
 8002ec2:	4605      	mov	r5, r0
 8002ec4:	2900      	cmp	r1, #0
 8002ec6:	d040      	beq.n	8002f4a <_free_r+0x8a>
 8002ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ecc:	1f0c      	subs	r4, r1, #4
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	bfb8      	it	lt
 8002ed2:	18e4      	addlt	r4, r4, r3
 8002ed4:	f000 f8de 	bl	8003094 <__malloc_lock>
 8002ed8:	4a1c      	ldr	r2, [pc, #112]	@ (8002f4c <_free_r+0x8c>)
 8002eda:	6813      	ldr	r3, [r2, #0]
 8002edc:	b933      	cbnz	r3, 8002eec <_free_r+0x2c>
 8002ede:	6063      	str	r3, [r4, #4]
 8002ee0:	6014      	str	r4, [r2, #0]
 8002ee2:	4628      	mov	r0, r5
 8002ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ee8:	f000 b8da 	b.w	80030a0 <__malloc_unlock>
 8002eec:	42a3      	cmp	r3, r4
 8002eee:	d908      	bls.n	8002f02 <_free_r+0x42>
 8002ef0:	6820      	ldr	r0, [r4, #0]
 8002ef2:	1821      	adds	r1, r4, r0
 8002ef4:	428b      	cmp	r3, r1
 8002ef6:	bf01      	itttt	eq
 8002ef8:	6819      	ldreq	r1, [r3, #0]
 8002efa:	685b      	ldreq	r3, [r3, #4]
 8002efc:	1809      	addeq	r1, r1, r0
 8002efe:	6021      	streq	r1, [r4, #0]
 8002f00:	e7ed      	b.n	8002ede <_free_r+0x1e>
 8002f02:	461a      	mov	r2, r3
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	b10b      	cbz	r3, 8002f0c <_free_r+0x4c>
 8002f08:	42a3      	cmp	r3, r4
 8002f0a:	d9fa      	bls.n	8002f02 <_free_r+0x42>
 8002f0c:	6811      	ldr	r1, [r2, #0]
 8002f0e:	1850      	adds	r0, r2, r1
 8002f10:	42a0      	cmp	r0, r4
 8002f12:	d10b      	bne.n	8002f2c <_free_r+0x6c>
 8002f14:	6820      	ldr	r0, [r4, #0]
 8002f16:	4401      	add	r1, r0
 8002f18:	1850      	adds	r0, r2, r1
 8002f1a:	4283      	cmp	r3, r0
 8002f1c:	6011      	str	r1, [r2, #0]
 8002f1e:	d1e0      	bne.n	8002ee2 <_free_r+0x22>
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4408      	add	r0, r1
 8002f26:	6010      	str	r0, [r2, #0]
 8002f28:	6053      	str	r3, [r2, #4]
 8002f2a:	e7da      	b.n	8002ee2 <_free_r+0x22>
 8002f2c:	d902      	bls.n	8002f34 <_free_r+0x74>
 8002f2e:	230c      	movs	r3, #12
 8002f30:	602b      	str	r3, [r5, #0]
 8002f32:	e7d6      	b.n	8002ee2 <_free_r+0x22>
 8002f34:	6820      	ldr	r0, [r4, #0]
 8002f36:	1821      	adds	r1, r4, r0
 8002f38:	428b      	cmp	r3, r1
 8002f3a:	bf01      	itttt	eq
 8002f3c:	6819      	ldreq	r1, [r3, #0]
 8002f3e:	685b      	ldreq	r3, [r3, #4]
 8002f40:	1809      	addeq	r1, r1, r0
 8002f42:	6021      	streq	r1, [r4, #0]
 8002f44:	6063      	str	r3, [r4, #4]
 8002f46:	6054      	str	r4, [r2, #4]
 8002f48:	e7cb      	b.n	8002ee2 <_free_r+0x22>
 8002f4a:	bd38      	pop	{r3, r4, r5, pc}
 8002f4c:	20001ec0 	.word	0x20001ec0

08002f50 <sbrk_aligned>:
 8002f50:	b570      	push	{r4, r5, r6, lr}
 8002f52:	4e0f      	ldr	r6, [pc, #60]	@ (8002f90 <sbrk_aligned+0x40>)
 8002f54:	460c      	mov	r4, r1
 8002f56:	6831      	ldr	r1, [r6, #0]
 8002f58:	4605      	mov	r5, r0
 8002f5a:	b911      	cbnz	r1, 8002f62 <sbrk_aligned+0x12>
 8002f5c:	f000 fba8 	bl	80036b0 <_sbrk_r>
 8002f60:	6030      	str	r0, [r6, #0]
 8002f62:	4621      	mov	r1, r4
 8002f64:	4628      	mov	r0, r5
 8002f66:	f000 fba3 	bl	80036b0 <_sbrk_r>
 8002f6a:	1c43      	adds	r3, r0, #1
 8002f6c:	d103      	bne.n	8002f76 <sbrk_aligned+0x26>
 8002f6e:	f04f 34ff 	mov.w	r4, #4294967295
 8002f72:	4620      	mov	r0, r4
 8002f74:	bd70      	pop	{r4, r5, r6, pc}
 8002f76:	1cc4      	adds	r4, r0, #3
 8002f78:	f024 0403 	bic.w	r4, r4, #3
 8002f7c:	42a0      	cmp	r0, r4
 8002f7e:	d0f8      	beq.n	8002f72 <sbrk_aligned+0x22>
 8002f80:	1a21      	subs	r1, r4, r0
 8002f82:	4628      	mov	r0, r5
 8002f84:	f000 fb94 	bl	80036b0 <_sbrk_r>
 8002f88:	3001      	adds	r0, #1
 8002f8a:	d1f2      	bne.n	8002f72 <sbrk_aligned+0x22>
 8002f8c:	e7ef      	b.n	8002f6e <sbrk_aligned+0x1e>
 8002f8e:	bf00      	nop
 8002f90:	20001ebc 	.word	0x20001ebc

08002f94 <_malloc_r>:
 8002f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f98:	1ccd      	adds	r5, r1, #3
 8002f9a:	f025 0503 	bic.w	r5, r5, #3
 8002f9e:	3508      	adds	r5, #8
 8002fa0:	2d0c      	cmp	r5, #12
 8002fa2:	bf38      	it	cc
 8002fa4:	250c      	movcc	r5, #12
 8002fa6:	2d00      	cmp	r5, #0
 8002fa8:	4606      	mov	r6, r0
 8002faa:	db01      	blt.n	8002fb0 <_malloc_r+0x1c>
 8002fac:	42a9      	cmp	r1, r5
 8002fae:	d904      	bls.n	8002fba <_malloc_r+0x26>
 8002fb0:	230c      	movs	r3, #12
 8002fb2:	6033      	str	r3, [r6, #0]
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003090 <_malloc_r+0xfc>
 8002fbe:	f000 f869 	bl	8003094 <__malloc_lock>
 8002fc2:	f8d8 3000 	ldr.w	r3, [r8]
 8002fc6:	461c      	mov	r4, r3
 8002fc8:	bb44      	cbnz	r4, 800301c <_malloc_r+0x88>
 8002fca:	4629      	mov	r1, r5
 8002fcc:	4630      	mov	r0, r6
 8002fce:	f7ff ffbf 	bl	8002f50 <sbrk_aligned>
 8002fd2:	1c43      	adds	r3, r0, #1
 8002fd4:	4604      	mov	r4, r0
 8002fd6:	d158      	bne.n	800308a <_malloc_r+0xf6>
 8002fd8:	f8d8 4000 	ldr.w	r4, [r8]
 8002fdc:	4627      	mov	r7, r4
 8002fde:	2f00      	cmp	r7, #0
 8002fe0:	d143      	bne.n	800306a <_malloc_r+0xd6>
 8002fe2:	2c00      	cmp	r4, #0
 8002fe4:	d04b      	beq.n	800307e <_malloc_r+0xea>
 8002fe6:	6823      	ldr	r3, [r4, #0]
 8002fe8:	4639      	mov	r1, r7
 8002fea:	4630      	mov	r0, r6
 8002fec:	eb04 0903 	add.w	r9, r4, r3
 8002ff0:	f000 fb5e 	bl	80036b0 <_sbrk_r>
 8002ff4:	4581      	cmp	r9, r0
 8002ff6:	d142      	bne.n	800307e <_malloc_r+0xea>
 8002ff8:	6821      	ldr	r1, [r4, #0]
 8002ffa:	4630      	mov	r0, r6
 8002ffc:	1a6d      	subs	r5, r5, r1
 8002ffe:	4629      	mov	r1, r5
 8003000:	f7ff ffa6 	bl	8002f50 <sbrk_aligned>
 8003004:	3001      	adds	r0, #1
 8003006:	d03a      	beq.n	800307e <_malloc_r+0xea>
 8003008:	6823      	ldr	r3, [r4, #0]
 800300a:	442b      	add	r3, r5
 800300c:	6023      	str	r3, [r4, #0]
 800300e:	f8d8 3000 	ldr.w	r3, [r8]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	bb62      	cbnz	r2, 8003070 <_malloc_r+0xdc>
 8003016:	f8c8 7000 	str.w	r7, [r8]
 800301a:	e00f      	b.n	800303c <_malloc_r+0xa8>
 800301c:	6822      	ldr	r2, [r4, #0]
 800301e:	1b52      	subs	r2, r2, r5
 8003020:	d420      	bmi.n	8003064 <_malloc_r+0xd0>
 8003022:	2a0b      	cmp	r2, #11
 8003024:	d917      	bls.n	8003056 <_malloc_r+0xc2>
 8003026:	1961      	adds	r1, r4, r5
 8003028:	42a3      	cmp	r3, r4
 800302a:	6025      	str	r5, [r4, #0]
 800302c:	bf18      	it	ne
 800302e:	6059      	strne	r1, [r3, #4]
 8003030:	6863      	ldr	r3, [r4, #4]
 8003032:	bf08      	it	eq
 8003034:	f8c8 1000 	streq.w	r1, [r8]
 8003038:	5162      	str	r2, [r4, r5]
 800303a:	604b      	str	r3, [r1, #4]
 800303c:	4630      	mov	r0, r6
 800303e:	f000 f82f 	bl	80030a0 <__malloc_unlock>
 8003042:	f104 000b 	add.w	r0, r4, #11
 8003046:	1d23      	adds	r3, r4, #4
 8003048:	f020 0007 	bic.w	r0, r0, #7
 800304c:	1ac2      	subs	r2, r0, r3
 800304e:	bf1c      	itt	ne
 8003050:	1a1b      	subne	r3, r3, r0
 8003052:	50a3      	strne	r3, [r4, r2]
 8003054:	e7af      	b.n	8002fb6 <_malloc_r+0x22>
 8003056:	6862      	ldr	r2, [r4, #4]
 8003058:	42a3      	cmp	r3, r4
 800305a:	bf0c      	ite	eq
 800305c:	f8c8 2000 	streq.w	r2, [r8]
 8003060:	605a      	strne	r2, [r3, #4]
 8003062:	e7eb      	b.n	800303c <_malloc_r+0xa8>
 8003064:	4623      	mov	r3, r4
 8003066:	6864      	ldr	r4, [r4, #4]
 8003068:	e7ae      	b.n	8002fc8 <_malloc_r+0x34>
 800306a:	463c      	mov	r4, r7
 800306c:	687f      	ldr	r7, [r7, #4]
 800306e:	e7b6      	b.n	8002fde <_malloc_r+0x4a>
 8003070:	461a      	mov	r2, r3
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	42a3      	cmp	r3, r4
 8003076:	d1fb      	bne.n	8003070 <_malloc_r+0xdc>
 8003078:	2300      	movs	r3, #0
 800307a:	6053      	str	r3, [r2, #4]
 800307c:	e7de      	b.n	800303c <_malloc_r+0xa8>
 800307e:	230c      	movs	r3, #12
 8003080:	4630      	mov	r0, r6
 8003082:	6033      	str	r3, [r6, #0]
 8003084:	f000 f80c 	bl	80030a0 <__malloc_unlock>
 8003088:	e794      	b.n	8002fb4 <_malloc_r+0x20>
 800308a:	6005      	str	r5, [r0, #0]
 800308c:	e7d6      	b.n	800303c <_malloc_r+0xa8>
 800308e:	bf00      	nop
 8003090:	20001ec0 	.word	0x20001ec0

08003094 <__malloc_lock>:
 8003094:	4801      	ldr	r0, [pc, #4]	@ (800309c <__malloc_lock+0x8>)
 8003096:	f7ff bf11 	b.w	8002ebc <__retarget_lock_acquire_recursive>
 800309a:	bf00      	nop
 800309c:	20001eb8 	.word	0x20001eb8

080030a0 <__malloc_unlock>:
 80030a0:	4801      	ldr	r0, [pc, #4]	@ (80030a8 <__malloc_unlock+0x8>)
 80030a2:	f7ff bf0c 	b.w	8002ebe <__retarget_lock_release_recursive>
 80030a6:	bf00      	nop
 80030a8:	20001eb8 	.word	0x20001eb8

080030ac <__ssputs_r>:
 80030ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030b0:	461f      	mov	r7, r3
 80030b2:	688e      	ldr	r6, [r1, #8]
 80030b4:	4682      	mov	sl, r0
 80030b6:	42be      	cmp	r6, r7
 80030b8:	460c      	mov	r4, r1
 80030ba:	4690      	mov	r8, r2
 80030bc:	680b      	ldr	r3, [r1, #0]
 80030be:	d82d      	bhi.n	800311c <__ssputs_r+0x70>
 80030c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80030c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80030c8:	d026      	beq.n	8003118 <__ssputs_r+0x6c>
 80030ca:	6965      	ldr	r5, [r4, #20]
 80030cc:	6909      	ldr	r1, [r1, #16]
 80030ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030d2:	eba3 0901 	sub.w	r9, r3, r1
 80030d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80030da:	1c7b      	adds	r3, r7, #1
 80030dc:	444b      	add	r3, r9
 80030de:	106d      	asrs	r5, r5, #1
 80030e0:	429d      	cmp	r5, r3
 80030e2:	bf38      	it	cc
 80030e4:	461d      	movcc	r5, r3
 80030e6:	0553      	lsls	r3, r2, #21
 80030e8:	d527      	bpl.n	800313a <__ssputs_r+0x8e>
 80030ea:	4629      	mov	r1, r5
 80030ec:	f7ff ff52 	bl	8002f94 <_malloc_r>
 80030f0:	4606      	mov	r6, r0
 80030f2:	b360      	cbz	r0, 800314e <__ssputs_r+0xa2>
 80030f4:	464a      	mov	r2, r9
 80030f6:	6921      	ldr	r1, [r4, #16]
 80030f8:	f000 faf8 	bl	80036ec <memcpy>
 80030fc:	89a3      	ldrh	r3, [r4, #12]
 80030fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003106:	81a3      	strh	r3, [r4, #12]
 8003108:	6126      	str	r6, [r4, #16]
 800310a:	444e      	add	r6, r9
 800310c:	6026      	str	r6, [r4, #0]
 800310e:	463e      	mov	r6, r7
 8003110:	6165      	str	r5, [r4, #20]
 8003112:	eba5 0509 	sub.w	r5, r5, r9
 8003116:	60a5      	str	r5, [r4, #8]
 8003118:	42be      	cmp	r6, r7
 800311a:	d900      	bls.n	800311e <__ssputs_r+0x72>
 800311c:	463e      	mov	r6, r7
 800311e:	4632      	mov	r2, r6
 8003120:	4641      	mov	r1, r8
 8003122:	6820      	ldr	r0, [r4, #0]
 8003124:	f000 faaa 	bl	800367c <memmove>
 8003128:	2000      	movs	r0, #0
 800312a:	68a3      	ldr	r3, [r4, #8]
 800312c:	1b9b      	subs	r3, r3, r6
 800312e:	60a3      	str	r3, [r4, #8]
 8003130:	6823      	ldr	r3, [r4, #0]
 8003132:	4433      	add	r3, r6
 8003134:	6023      	str	r3, [r4, #0]
 8003136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800313a:	462a      	mov	r2, r5
 800313c:	f000 fae4 	bl	8003708 <_realloc_r>
 8003140:	4606      	mov	r6, r0
 8003142:	2800      	cmp	r0, #0
 8003144:	d1e0      	bne.n	8003108 <__ssputs_r+0x5c>
 8003146:	4650      	mov	r0, sl
 8003148:	6921      	ldr	r1, [r4, #16]
 800314a:	f7ff feb9 	bl	8002ec0 <_free_r>
 800314e:	230c      	movs	r3, #12
 8003150:	f8ca 3000 	str.w	r3, [sl]
 8003154:	89a3      	ldrh	r3, [r4, #12]
 8003156:	f04f 30ff 	mov.w	r0, #4294967295
 800315a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800315e:	81a3      	strh	r3, [r4, #12]
 8003160:	e7e9      	b.n	8003136 <__ssputs_r+0x8a>
	...

08003164 <_svfiprintf_r>:
 8003164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003168:	4698      	mov	r8, r3
 800316a:	898b      	ldrh	r3, [r1, #12]
 800316c:	4607      	mov	r7, r0
 800316e:	061b      	lsls	r3, r3, #24
 8003170:	460d      	mov	r5, r1
 8003172:	4614      	mov	r4, r2
 8003174:	b09d      	sub	sp, #116	@ 0x74
 8003176:	d510      	bpl.n	800319a <_svfiprintf_r+0x36>
 8003178:	690b      	ldr	r3, [r1, #16]
 800317a:	b973      	cbnz	r3, 800319a <_svfiprintf_r+0x36>
 800317c:	2140      	movs	r1, #64	@ 0x40
 800317e:	f7ff ff09 	bl	8002f94 <_malloc_r>
 8003182:	6028      	str	r0, [r5, #0]
 8003184:	6128      	str	r0, [r5, #16]
 8003186:	b930      	cbnz	r0, 8003196 <_svfiprintf_r+0x32>
 8003188:	230c      	movs	r3, #12
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	f04f 30ff 	mov.w	r0, #4294967295
 8003190:	b01d      	add	sp, #116	@ 0x74
 8003192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003196:	2340      	movs	r3, #64	@ 0x40
 8003198:	616b      	str	r3, [r5, #20]
 800319a:	2300      	movs	r3, #0
 800319c:	9309      	str	r3, [sp, #36]	@ 0x24
 800319e:	2320      	movs	r3, #32
 80031a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80031a4:	2330      	movs	r3, #48	@ 0x30
 80031a6:	f04f 0901 	mov.w	r9, #1
 80031aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80031ae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003348 <_svfiprintf_r+0x1e4>
 80031b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80031b6:	4623      	mov	r3, r4
 80031b8:	469a      	mov	sl, r3
 80031ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031be:	b10a      	cbz	r2, 80031c4 <_svfiprintf_r+0x60>
 80031c0:	2a25      	cmp	r2, #37	@ 0x25
 80031c2:	d1f9      	bne.n	80031b8 <_svfiprintf_r+0x54>
 80031c4:	ebba 0b04 	subs.w	fp, sl, r4
 80031c8:	d00b      	beq.n	80031e2 <_svfiprintf_r+0x7e>
 80031ca:	465b      	mov	r3, fp
 80031cc:	4622      	mov	r2, r4
 80031ce:	4629      	mov	r1, r5
 80031d0:	4638      	mov	r0, r7
 80031d2:	f7ff ff6b 	bl	80030ac <__ssputs_r>
 80031d6:	3001      	adds	r0, #1
 80031d8:	f000 80a7 	beq.w	800332a <_svfiprintf_r+0x1c6>
 80031dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80031de:	445a      	add	r2, fp
 80031e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80031e2:	f89a 3000 	ldrb.w	r3, [sl]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 809f 	beq.w	800332a <_svfiprintf_r+0x1c6>
 80031ec:	2300      	movs	r3, #0
 80031ee:	f04f 32ff 	mov.w	r2, #4294967295
 80031f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031f6:	f10a 0a01 	add.w	sl, sl, #1
 80031fa:	9304      	str	r3, [sp, #16]
 80031fc:	9307      	str	r3, [sp, #28]
 80031fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003202:	931a      	str	r3, [sp, #104]	@ 0x68
 8003204:	4654      	mov	r4, sl
 8003206:	2205      	movs	r2, #5
 8003208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800320c:	484e      	ldr	r0, [pc, #312]	@ (8003348 <_svfiprintf_r+0x1e4>)
 800320e:	f000 fa5f 	bl	80036d0 <memchr>
 8003212:	9a04      	ldr	r2, [sp, #16]
 8003214:	b9d8      	cbnz	r0, 800324e <_svfiprintf_r+0xea>
 8003216:	06d0      	lsls	r0, r2, #27
 8003218:	bf44      	itt	mi
 800321a:	2320      	movmi	r3, #32
 800321c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003220:	0711      	lsls	r1, r2, #28
 8003222:	bf44      	itt	mi
 8003224:	232b      	movmi	r3, #43	@ 0x2b
 8003226:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800322a:	f89a 3000 	ldrb.w	r3, [sl]
 800322e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003230:	d015      	beq.n	800325e <_svfiprintf_r+0xfa>
 8003232:	4654      	mov	r4, sl
 8003234:	2000      	movs	r0, #0
 8003236:	f04f 0c0a 	mov.w	ip, #10
 800323a:	9a07      	ldr	r2, [sp, #28]
 800323c:	4621      	mov	r1, r4
 800323e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003242:	3b30      	subs	r3, #48	@ 0x30
 8003244:	2b09      	cmp	r3, #9
 8003246:	d94b      	bls.n	80032e0 <_svfiprintf_r+0x17c>
 8003248:	b1b0      	cbz	r0, 8003278 <_svfiprintf_r+0x114>
 800324a:	9207      	str	r2, [sp, #28]
 800324c:	e014      	b.n	8003278 <_svfiprintf_r+0x114>
 800324e:	eba0 0308 	sub.w	r3, r0, r8
 8003252:	fa09 f303 	lsl.w	r3, r9, r3
 8003256:	4313      	orrs	r3, r2
 8003258:	46a2      	mov	sl, r4
 800325a:	9304      	str	r3, [sp, #16]
 800325c:	e7d2      	b.n	8003204 <_svfiprintf_r+0xa0>
 800325e:	9b03      	ldr	r3, [sp, #12]
 8003260:	1d19      	adds	r1, r3, #4
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	9103      	str	r1, [sp, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	bfbb      	ittet	lt
 800326a:	425b      	neglt	r3, r3
 800326c:	f042 0202 	orrlt.w	r2, r2, #2
 8003270:	9307      	strge	r3, [sp, #28]
 8003272:	9307      	strlt	r3, [sp, #28]
 8003274:	bfb8      	it	lt
 8003276:	9204      	strlt	r2, [sp, #16]
 8003278:	7823      	ldrb	r3, [r4, #0]
 800327a:	2b2e      	cmp	r3, #46	@ 0x2e
 800327c:	d10a      	bne.n	8003294 <_svfiprintf_r+0x130>
 800327e:	7863      	ldrb	r3, [r4, #1]
 8003280:	2b2a      	cmp	r3, #42	@ 0x2a
 8003282:	d132      	bne.n	80032ea <_svfiprintf_r+0x186>
 8003284:	9b03      	ldr	r3, [sp, #12]
 8003286:	3402      	adds	r4, #2
 8003288:	1d1a      	adds	r2, r3, #4
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	9203      	str	r2, [sp, #12]
 800328e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003292:	9305      	str	r3, [sp, #20]
 8003294:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800334c <_svfiprintf_r+0x1e8>
 8003298:	2203      	movs	r2, #3
 800329a:	4650      	mov	r0, sl
 800329c:	7821      	ldrb	r1, [r4, #0]
 800329e:	f000 fa17 	bl	80036d0 <memchr>
 80032a2:	b138      	cbz	r0, 80032b4 <_svfiprintf_r+0x150>
 80032a4:	2240      	movs	r2, #64	@ 0x40
 80032a6:	9b04      	ldr	r3, [sp, #16]
 80032a8:	eba0 000a 	sub.w	r0, r0, sl
 80032ac:	4082      	lsls	r2, r0
 80032ae:	4313      	orrs	r3, r2
 80032b0:	3401      	adds	r4, #1
 80032b2:	9304      	str	r3, [sp, #16]
 80032b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032b8:	2206      	movs	r2, #6
 80032ba:	4825      	ldr	r0, [pc, #148]	@ (8003350 <_svfiprintf_r+0x1ec>)
 80032bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80032c0:	f000 fa06 	bl	80036d0 <memchr>
 80032c4:	2800      	cmp	r0, #0
 80032c6:	d036      	beq.n	8003336 <_svfiprintf_r+0x1d2>
 80032c8:	4b22      	ldr	r3, [pc, #136]	@ (8003354 <_svfiprintf_r+0x1f0>)
 80032ca:	bb1b      	cbnz	r3, 8003314 <_svfiprintf_r+0x1b0>
 80032cc:	9b03      	ldr	r3, [sp, #12]
 80032ce:	3307      	adds	r3, #7
 80032d0:	f023 0307 	bic.w	r3, r3, #7
 80032d4:	3308      	adds	r3, #8
 80032d6:	9303      	str	r3, [sp, #12]
 80032d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032da:	4433      	add	r3, r6
 80032dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80032de:	e76a      	b.n	80031b6 <_svfiprintf_r+0x52>
 80032e0:	460c      	mov	r4, r1
 80032e2:	2001      	movs	r0, #1
 80032e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80032e8:	e7a8      	b.n	800323c <_svfiprintf_r+0xd8>
 80032ea:	2300      	movs	r3, #0
 80032ec:	f04f 0c0a 	mov.w	ip, #10
 80032f0:	4619      	mov	r1, r3
 80032f2:	3401      	adds	r4, #1
 80032f4:	9305      	str	r3, [sp, #20]
 80032f6:	4620      	mov	r0, r4
 80032f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032fc:	3a30      	subs	r2, #48	@ 0x30
 80032fe:	2a09      	cmp	r2, #9
 8003300:	d903      	bls.n	800330a <_svfiprintf_r+0x1a6>
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0c6      	beq.n	8003294 <_svfiprintf_r+0x130>
 8003306:	9105      	str	r1, [sp, #20]
 8003308:	e7c4      	b.n	8003294 <_svfiprintf_r+0x130>
 800330a:	4604      	mov	r4, r0
 800330c:	2301      	movs	r3, #1
 800330e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003312:	e7f0      	b.n	80032f6 <_svfiprintf_r+0x192>
 8003314:	ab03      	add	r3, sp, #12
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	462a      	mov	r2, r5
 800331a:	4638      	mov	r0, r7
 800331c:	4b0e      	ldr	r3, [pc, #56]	@ (8003358 <_svfiprintf_r+0x1f4>)
 800331e:	a904      	add	r1, sp, #16
 8003320:	f3af 8000 	nop.w
 8003324:	1c42      	adds	r2, r0, #1
 8003326:	4606      	mov	r6, r0
 8003328:	d1d6      	bne.n	80032d8 <_svfiprintf_r+0x174>
 800332a:	89ab      	ldrh	r3, [r5, #12]
 800332c:	065b      	lsls	r3, r3, #25
 800332e:	f53f af2d 	bmi.w	800318c <_svfiprintf_r+0x28>
 8003332:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003334:	e72c      	b.n	8003190 <_svfiprintf_r+0x2c>
 8003336:	ab03      	add	r3, sp, #12
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	462a      	mov	r2, r5
 800333c:	4638      	mov	r0, r7
 800333e:	4b06      	ldr	r3, [pc, #24]	@ (8003358 <_svfiprintf_r+0x1f4>)
 8003340:	a904      	add	r1, sp, #16
 8003342:	f000 f87d 	bl	8003440 <_printf_i>
 8003346:	e7ed      	b.n	8003324 <_svfiprintf_r+0x1c0>
 8003348:	08003898 	.word	0x08003898
 800334c:	0800389e 	.word	0x0800389e
 8003350:	080038a2 	.word	0x080038a2
 8003354:	00000000 	.word	0x00000000
 8003358:	080030ad 	.word	0x080030ad

0800335c <_printf_common>:
 800335c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003360:	4616      	mov	r6, r2
 8003362:	4698      	mov	r8, r3
 8003364:	688a      	ldr	r2, [r1, #8]
 8003366:	690b      	ldr	r3, [r1, #16]
 8003368:	4607      	mov	r7, r0
 800336a:	4293      	cmp	r3, r2
 800336c:	bfb8      	it	lt
 800336e:	4613      	movlt	r3, r2
 8003370:	6033      	str	r3, [r6, #0]
 8003372:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003376:	460c      	mov	r4, r1
 8003378:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800337c:	b10a      	cbz	r2, 8003382 <_printf_common+0x26>
 800337e:	3301      	adds	r3, #1
 8003380:	6033      	str	r3, [r6, #0]
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	0699      	lsls	r1, r3, #26
 8003386:	bf42      	ittt	mi
 8003388:	6833      	ldrmi	r3, [r6, #0]
 800338a:	3302      	addmi	r3, #2
 800338c:	6033      	strmi	r3, [r6, #0]
 800338e:	6825      	ldr	r5, [r4, #0]
 8003390:	f015 0506 	ands.w	r5, r5, #6
 8003394:	d106      	bne.n	80033a4 <_printf_common+0x48>
 8003396:	f104 0a19 	add.w	sl, r4, #25
 800339a:	68e3      	ldr	r3, [r4, #12]
 800339c:	6832      	ldr	r2, [r6, #0]
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	42ab      	cmp	r3, r5
 80033a2:	dc2b      	bgt.n	80033fc <_printf_common+0xa0>
 80033a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80033a8:	6822      	ldr	r2, [r4, #0]
 80033aa:	3b00      	subs	r3, #0
 80033ac:	bf18      	it	ne
 80033ae:	2301      	movne	r3, #1
 80033b0:	0692      	lsls	r2, r2, #26
 80033b2:	d430      	bmi.n	8003416 <_printf_common+0xba>
 80033b4:	4641      	mov	r1, r8
 80033b6:	4638      	mov	r0, r7
 80033b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80033bc:	47c8      	blx	r9
 80033be:	3001      	adds	r0, #1
 80033c0:	d023      	beq.n	800340a <_printf_common+0xae>
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	6922      	ldr	r2, [r4, #16]
 80033c6:	f003 0306 	and.w	r3, r3, #6
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	bf14      	ite	ne
 80033ce:	2500      	movne	r5, #0
 80033d0:	6833      	ldreq	r3, [r6, #0]
 80033d2:	f04f 0600 	mov.w	r6, #0
 80033d6:	bf08      	it	eq
 80033d8:	68e5      	ldreq	r5, [r4, #12]
 80033da:	f104 041a 	add.w	r4, r4, #26
 80033de:	bf08      	it	eq
 80033e0:	1aed      	subeq	r5, r5, r3
 80033e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80033e6:	bf08      	it	eq
 80033e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033ec:	4293      	cmp	r3, r2
 80033ee:	bfc4      	itt	gt
 80033f0:	1a9b      	subgt	r3, r3, r2
 80033f2:	18ed      	addgt	r5, r5, r3
 80033f4:	42b5      	cmp	r5, r6
 80033f6:	d11a      	bne.n	800342e <_printf_common+0xd2>
 80033f8:	2000      	movs	r0, #0
 80033fa:	e008      	b.n	800340e <_printf_common+0xb2>
 80033fc:	2301      	movs	r3, #1
 80033fe:	4652      	mov	r2, sl
 8003400:	4641      	mov	r1, r8
 8003402:	4638      	mov	r0, r7
 8003404:	47c8      	blx	r9
 8003406:	3001      	adds	r0, #1
 8003408:	d103      	bne.n	8003412 <_printf_common+0xb6>
 800340a:	f04f 30ff 	mov.w	r0, #4294967295
 800340e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003412:	3501      	adds	r5, #1
 8003414:	e7c1      	b.n	800339a <_printf_common+0x3e>
 8003416:	2030      	movs	r0, #48	@ 0x30
 8003418:	18e1      	adds	r1, r4, r3
 800341a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003424:	4422      	add	r2, r4
 8003426:	3302      	adds	r3, #2
 8003428:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800342c:	e7c2      	b.n	80033b4 <_printf_common+0x58>
 800342e:	2301      	movs	r3, #1
 8003430:	4622      	mov	r2, r4
 8003432:	4641      	mov	r1, r8
 8003434:	4638      	mov	r0, r7
 8003436:	47c8      	blx	r9
 8003438:	3001      	adds	r0, #1
 800343a:	d0e6      	beq.n	800340a <_printf_common+0xae>
 800343c:	3601      	adds	r6, #1
 800343e:	e7d9      	b.n	80033f4 <_printf_common+0x98>

08003440 <_printf_i>:
 8003440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003444:	7e0f      	ldrb	r7, [r1, #24]
 8003446:	4691      	mov	r9, r2
 8003448:	2f78      	cmp	r7, #120	@ 0x78
 800344a:	4680      	mov	r8, r0
 800344c:	460c      	mov	r4, r1
 800344e:	469a      	mov	sl, r3
 8003450:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003452:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003456:	d807      	bhi.n	8003468 <_printf_i+0x28>
 8003458:	2f62      	cmp	r7, #98	@ 0x62
 800345a:	d80a      	bhi.n	8003472 <_printf_i+0x32>
 800345c:	2f00      	cmp	r7, #0
 800345e:	f000 80d1 	beq.w	8003604 <_printf_i+0x1c4>
 8003462:	2f58      	cmp	r7, #88	@ 0x58
 8003464:	f000 80b8 	beq.w	80035d8 <_printf_i+0x198>
 8003468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800346c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003470:	e03a      	b.n	80034e8 <_printf_i+0xa8>
 8003472:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003476:	2b15      	cmp	r3, #21
 8003478:	d8f6      	bhi.n	8003468 <_printf_i+0x28>
 800347a:	a101      	add	r1, pc, #4	@ (adr r1, 8003480 <_printf_i+0x40>)
 800347c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003480:	080034d9 	.word	0x080034d9
 8003484:	080034ed 	.word	0x080034ed
 8003488:	08003469 	.word	0x08003469
 800348c:	08003469 	.word	0x08003469
 8003490:	08003469 	.word	0x08003469
 8003494:	08003469 	.word	0x08003469
 8003498:	080034ed 	.word	0x080034ed
 800349c:	08003469 	.word	0x08003469
 80034a0:	08003469 	.word	0x08003469
 80034a4:	08003469 	.word	0x08003469
 80034a8:	08003469 	.word	0x08003469
 80034ac:	080035eb 	.word	0x080035eb
 80034b0:	08003517 	.word	0x08003517
 80034b4:	080035a5 	.word	0x080035a5
 80034b8:	08003469 	.word	0x08003469
 80034bc:	08003469 	.word	0x08003469
 80034c0:	0800360d 	.word	0x0800360d
 80034c4:	08003469 	.word	0x08003469
 80034c8:	08003517 	.word	0x08003517
 80034cc:	08003469 	.word	0x08003469
 80034d0:	08003469 	.word	0x08003469
 80034d4:	080035ad 	.word	0x080035ad
 80034d8:	6833      	ldr	r3, [r6, #0]
 80034da:	1d1a      	adds	r2, r3, #4
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6032      	str	r2, [r6, #0]
 80034e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80034e8:	2301      	movs	r3, #1
 80034ea:	e09c      	b.n	8003626 <_printf_i+0x1e6>
 80034ec:	6833      	ldr	r3, [r6, #0]
 80034ee:	6820      	ldr	r0, [r4, #0]
 80034f0:	1d19      	adds	r1, r3, #4
 80034f2:	6031      	str	r1, [r6, #0]
 80034f4:	0606      	lsls	r6, r0, #24
 80034f6:	d501      	bpl.n	80034fc <_printf_i+0xbc>
 80034f8:	681d      	ldr	r5, [r3, #0]
 80034fa:	e003      	b.n	8003504 <_printf_i+0xc4>
 80034fc:	0645      	lsls	r5, r0, #25
 80034fe:	d5fb      	bpl.n	80034f8 <_printf_i+0xb8>
 8003500:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003504:	2d00      	cmp	r5, #0
 8003506:	da03      	bge.n	8003510 <_printf_i+0xd0>
 8003508:	232d      	movs	r3, #45	@ 0x2d
 800350a:	426d      	negs	r5, r5
 800350c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003510:	230a      	movs	r3, #10
 8003512:	4858      	ldr	r0, [pc, #352]	@ (8003674 <_printf_i+0x234>)
 8003514:	e011      	b.n	800353a <_printf_i+0xfa>
 8003516:	6821      	ldr	r1, [r4, #0]
 8003518:	6833      	ldr	r3, [r6, #0]
 800351a:	0608      	lsls	r0, r1, #24
 800351c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003520:	d402      	bmi.n	8003528 <_printf_i+0xe8>
 8003522:	0649      	lsls	r1, r1, #25
 8003524:	bf48      	it	mi
 8003526:	b2ad      	uxthmi	r5, r5
 8003528:	2f6f      	cmp	r7, #111	@ 0x6f
 800352a:	6033      	str	r3, [r6, #0]
 800352c:	bf14      	ite	ne
 800352e:	230a      	movne	r3, #10
 8003530:	2308      	moveq	r3, #8
 8003532:	4850      	ldr	r0, [pc, #320]	@ (8003674 <_printf_i+0x234>)
 8003534:	2100      	movs	r1, #0
 8003536:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800353a:	6866      	ldr	r6, [r4, #4]
 800353c:	2e00      	cmp	r6, #0
 800353e:	60a6      	str	r6, [r4, #8]
 8003540:	db05      	blt.n	800354e <_printf_i+0x10e>
 8003542:	6821      	ldr	r1, [r4, #0]
 8003544:	432e      	orrs	r6, r5
 8003546:	f021 0104 	bic.w	r1, r1, #4
 800354a:	6021      	str	r1, [r4, #0]
 800354c:	d04b      	beq.n	80035e6 <_printf_i+0x1a6>
 800354e:	4616      	mov	r6, r2
 8003550:	fbb5 f1f3 	udiv	r1, r5, r3
 8003554:	fb03 5711 	mls	r7, r3, r1, r5
 8003558:	5dc7      	ldrb	r7, [r0, r7]
 800355a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800355e:	462f      	mov	r7, r5
 8003560:	42bb      	cmp	r3, r7
 8003562:	460d      	mov	r5, r1
 8003564:	d9f4      	bls.n	8003550 <_printf_i+0x110>
 8003566:	2b08      	cmp	r3, #8
 8003568:	d10b      	bne.n	8003582 <_printf_i+0x142>
 800356a:	6823      	ldr	r3, [r4, #0]
 800356c:	07df      	lsls	r7, r3, #31
 800356e:	d508      	bpl.n	8003582 <_printf_i+0x142>
 8003570:	6923      	ldr	r3, [r4, #16]
 8003572:	6861      	ldr	r1, [r4, #4]
 8003574:	4299      	cmp	r1, r3
 8003576:	bfde      	ittt	le
 8003578:	2330      	movle	r3, #48	@ 0x30
 800357a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800357e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003582:	1b92      	subs	r2, r2, r6
 8003584:	6122      	str	r2, [r4, #16]
 8003586:	464b      	mov	r3, r9
 8003588:	4621      	mov	r1, r4
 800358a:	4640      	mov	r0, r8
 800358c:	f8cd a000 	str.w	sl, [sp]
 8003590:	aa03      	add	r2, sp, #12
 8003592:	f7ff fee3 	bl	800335c <_printf_common>
 8003596:	3001      	adds	r0, #1
 8003598:	d14a      	bne.n	8003630 <_printf_i+0x1f0>
 800359a:	f04f 30ff 	mov.w	r0, #4294967295
 800359e:	b004      	add	sp, #16
 80035a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035a4:	6823      	ldr	r3, [r4, #0]
 80035a6:	f043 0320 	orr.w	r3, r3, #32
 80035aa:	6023      	str	r3, [r4, #0]
 80035ac:	2778      	movs	r7, #120	@ 0x78
 80035ae:	4832      	ldr	r0, [pc, #200]	@ (8003678 <_printf_i+0x238>)
 80035b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	6831      	ldr	r1, [r6, #0]
 80035b8:	061f      	lsls	r7, r3, #24
 80035ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80035be:	d402      	bmi.n	80035c6 <_printf_i+0x186>
 80035c0:	065f      	lsls	r7, r3, #25
 80035c2:	bf48      	it	mi
 80035c4:	b2ad      	uxthmi	r5, r5
 80035c6:	6031      	str	r1, [r6, #0]
 80035c8:	07d9      	lsls	r1, r3, #31
 80035ca:	bf44      	itt	mi
 80035cc:	f043 0320 	orrmi.w	r3, r3, #32
 80035d0:	6023      	strmi	r3, [r4, #0]
 80035d2:	b11d      	cbz	r5, 80035dc <_printf_i+0x19c>
 80035d4:	2310      	movs	r3, #16
 80035d6:	e7ad      	b.n	8003534 <_printf_i+0xf4>
 80035d8:	4826      	ldr	r0, [pc, #152]	@ (8003674 <_printf_i+0x234>)
 80035da:	e7e9      	b.n	80035b0 <_printf_i+0x170>
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	f023 0320 	bic.w	r3, r3, #32
 80035e2:	6023      	str	r3, [r4, #0]
 80035e4:	e7f6      	b.n	80035d4 <_printf_i+0x194>
 80035e6:	4616      	mov	r6, r2
 80035e8:	e7bd      	b.n	8003566 <_printf_i+0x126>
 80035ea:	6833      	ldr	r3, [r6, #0]
 80035ec:	6825      	ldr	r5, [r4, #0]
 80035ee:	1d18      	adds	r0, r3, #4
 80035f0:	6961      	ldr	r1, [r4, #20]
 80035f2:	6030      	str	r0, [r6, #0]
 80035f4:	062e      	lsls	r6, r5, #24
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	d501      	bpl.n	80035fe <_printf_i+0x1be>
 80035fa:	6019      	str	r1, [r3, #0]
 80035fc:	e002      	b.n	8003604 <_printf_i+0x1c4>
 80035fe:	0668      	lsls	r0, r5, #25
 8003600:	d5fb      	bpl.n	80035fa <_printf_i+0x1ba>
 8003602:	8019      	strh	r1, [r3, #0]
 8003604:	2300      	movs	r3, #0
 8003606:	4616      	mov	r6, r2
 8003608:	6123      	str	r3, [r4, #16]
 800360a:	e7bc      	b.n	8003586 <_printf_i+0x146>
 800360c:	6833      	ldr	r3, [r6, #0]
 800360e:	2100      	movs	r1, #0
 8003610:	1d1a      	adds	r2, r3, #4
 8003612:	6032      	str	r2, [r6, #0]
 8003614:	681e      	ldr	r6, [r3, #0]
 8003616:	6862      	ldr	r2, [r4, #4]
 8003618:	4630      	mov	r0, r6
 800361a:	f000 f859 	bl	80036d0 <memchr>
 800361e:	b108      	cbz	r0, 8003624 <_printf_i+0x1e4>
 8003620:	1b80      	subs	r0, r0, r6
 8003622:	6060      	str	r0, [r4, #4]
 8003624:	6863      	ldr	r3, [r4, #4]
 8003626:	6123      	str	r3, [r4, #16]
 8003628:	2300      	movs	r3, #0
 800362a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800362e:	e7aa      	b.n	8003586 <_printf_i+0x146>
 8003630:	4632      	mov	r2, r6
 8003632:	4649      	mov	r1, r9
 8003634:	4640      	mov	r0, r8
 8003636:	6923      	ldr	r3, [r4, #16]
 8003638:	47d0      	blx	sl
 800363a:	3001      	adds	r0, #1
 800363c:	d0ad      	beq.n	800359a <_printf_i+0x15a>
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	079b      	lsls	r3, r3, #30
 8003642:	d413      	bmi.n	800366c <_printf_i+0x22c>
 8003644:	68e0      	ldr	r0, [r4, #12]
 8003646:	9b03      	ldr	r3, [sp, #12]
 8003648:	4298      	cmp	r0, r3
 800364a:	bfb8      	it	lt
 800364c:	4618      	movlt	r0, r3
 800364e:	e7a6      	b.n	800359e <_printf_i+0x15e>
 8003650:	2301      	movs	r3, #1
 8003652:	4632      	mov	r2, r6
 8003654:	4649      	mov	r1, r9
 8003656:	4640      	mov	r0, r8
 8003658:	47d0      	blx	sl
 800365a:	3001      	adds	r0, #1
 800365c:	d09d      	beq.n	800359a <_printf_i+0x15a>
 800365e:	3501      	adds	r5, #1
 8003660:	68e3      	ldr	r3, [r4, #12]
 8003662:	9903      	ldr	r1, [sp, #12]
 8003664:	1a5b      	subs	r3, r3, r1
 8003666:	42ab      	cmp	r3, r5
 8003668:	dcf2      	bgt.n	8003650 <_printf_i+0x210>
 800366a:	e7eb      	b.n	8003644 <_printf_i+0x204>
 800366c:	2500      	movs	r5, #0
 800366e:	f104 0619 	add.w	r6, r4, #25
 8003672:	e7f5      	b.n	8003660 <_printf_i+0x220>
 8003674:	080038a9 	.word	0x080038a9
 8003678:	080038ba 	.word	0x080038ba

0800367c <memmove>:
 800367c:	4288      	cmp	r0, r1
 800367e:	b510      	push	{r4, lr}
 8003680:	eb01 0402 	add.w	r4, r1, r2
 8003684:	d902      	bls.n	800368c <memmove+0x10>
 8003686:	4284      	cmp	r4, r0
 8003688:	4623      	mov	r3, r4
 800368a:	d807      	bhi.n	800369c <memmove+0x20>
 800368c:	1e43      	subs	r3, r0, #1
 800368e:	42a1      	cmp	r1, r4
 8003690:	d008      	beq.n	80036a4 <memmove+0x28>
 8003692:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003696:	f803 2f01 	strb.w	r2, [r3, #1]!
 800369a:	e7f8      	b.n	800368e <memmove+0x12>
 800369c:	4601      	mov	r1, r0
 800369e:	4402      	add	r2, r0
 80036a0:	428a      	cmp	r2, r1
 80036a2:	d100      	bne.n	80036a6 <memmove+0x2a>
 80036a4:	bd10      	pop	{r4, pc}
 80036a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80036ae:	e7f7      	b.n	80036a0 <memmove+0x24>

080036b0 <_sbrk_r>:
 80036b0:	b538      	push	{r3, r4, r5, lr}
 80036b2:	2300      	movs	r3, #0
 80036b4:	4d05      	ldr	r5, [pc, #20]	@ (80036cc <_sbrk_r+0x1c>)
 80036b6:	4604      	mov	r4, r0
 80036b8:	4608      	mov	r0, r1
 80036ba:	602b      	str	r3, [r5, #0]
 80036bc:	f7fd fdce 	bl	800125c <_sbrk>
 80036c0:	1c43      	adds	r3, r0, #1
 80036c2:	d102      	bne.n	80036ca <_sbrk_r+0x1a>
 80036c4:	682b      	ldr	r3, [r5, #0]
 80036c6:	b103      	cbz	r3, 80036ca <_sbrk_r+0x1a>
 80036c8:	6023      	str	r3, [r4, #0]
 80036ca:	bd38      	pop	{r3, r4, r5, pc}
 80036cc:	20001eb4 	.word	0x20001eb4

080036d0 <memchr>:
 80036d0:	4603      	mov	r3, r0
 80036d2:	b510      	push	{r4, lr}
 80036d4:	b2c9      	uxtb	r1, r1
 80036d6:	4402      	add	r2, r0
 80036d8:	4293      	cmp	r3, r2
 80036da:	4618      	mov	r0, r3
 80036dc:	d101      	bne.n	80036e2 <memchr+0x12>
 80036de:	2000      	movs	r0, #0
 80036e0:	e003      	b.n	80036ea <memchr+0x1a>
 80036e2:	7804      	ldrb	r4, [r0, #0]
 80036e4:	3301      	adds	r3, #1
 80036e6:	428c      	cmp	r4, r1
 80036e8:	d1f6      	bne.n	80036d8 <memchr+0x8>
 80036ea:	bd10      	pop	{r4, pc}

080036ec <memcpy>:
 80036ec:	440a      	add	r2, r1
 80036ee:	4291      	cmp	r1, r2
 80036f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80036f4:	d100      	bne.n	80036f8 <memcpy+0xc>
 80036f6:	4770      	bx	lr
 80036f8:	b510      	push	{r4, lr}
 80036fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036fe:	4291      	cmp	r1, r2
 8003700:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003704:	d1f9      	bne.n	80036fa <memcpy+0xe>
 8003706:	bd10      	pop	{r4, pc}

08003708 <_realloc_r>:
 8003708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800370c:	4607      	mov	r7, r0
 800370e:	4614      	mov	r4, r2
 8003710:	460d      	mov	r5, r1
 8003712:	b921      	cbnz	r1, 800371e <_realloc_r+0x16>
 8003714:	4611      	mov	r1, r2
 8003716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800371a:	f7ff bc3b 	b.w	8002f94 <_malloc_r>
 800371e:	b92a      	cbnz	r2, 800372c <_realloc_r+0x24>
 8003720:	f7ff fbce 	bl	8002ec0 <_free_r>
 8003724:	4625      	mov	r5, r4
 8003726:	4628      	mov	r0, r5
 8003728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800372c:	f000 f81a 	bl	8003764 <_malloc_usable_size_r>
 8003730:	4284      	cmp	r4, r0
 8003732:	4606      	mov	r6, r0
 8003734:	d802      	bhi.n	800373c <_realloc_r+0x34>
 8003736:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800373a:	d8f4      	bhi.n	8003726 <_realloc_r+0x1e>
 800373c:	4621      	mov	r1, r4
 800373e:	4638      	mov	r0, r7
 8003740:	f7ff fc28 	bl	8002f94 <_malloc_r>
 8003744:	4680      	mov	r8, r0
 8003746:	b908      	cbnz	r0, 800374c <_realloc_r+0x44>
 8003748:	4645      	mov	r5, r8
 800374a:	e7ec      	b.n	8003726 <_realloc_r+0x1e>
 800374c:	42b4      	cmp	r4, r6
 800374e:	4622      	mov	r2, r4
 8003750:	4629      	mov	r1, r5
 8003752:	bf28      	it	cs
 8003754:	4632      	movcs	r2, r6
 8003756:	f7ff ffc9 	bl	80036ec <memcpy>
 800375a:	4629      	mov	r1, r5
 800375c:	4638      	mov	r0, r7
 800375e:	f7ff fbaf 	bl	8002ec0 <_free_r>
 8003762:	e7f1      	b.n	8003748 <_realloc_r+0x40>

08003764 <_malloc_usable_size_r>:
 8003764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003768:	1f18      	subs	r0, r3, #4
 800376a:	2b00      	cmp	r3, #0
 800376c:	bfbc      	itt	lt
 800376e:	580b      	ldrlt	r3, [r1, r0]
 8003770:	18c0      	addlt	r0, r0, r3
 8003772:	4770      	bx	lr

08003774 <_init>:
 8003774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003776:	bf00      	nop
 8003778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377a:	bc08      	pop	{r3}
 800377c:	469e      	mov	lr, r3
 800377e:	4770      	bx	lr

08003780 <_fini>:
 8003780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003782:	bf00      	nop
 8003784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003786:	bc08      	pop	{r3}
 8003788:	469e      	mov	lr, r3
 800378a:	4770      	bx	lr
